import{j as a,c as d,b as o,ag as t}from"./chunks/framework.BlzMDYBM.js";const A=JSON.parse('{"title":"适配器模式","description":"","frontmatter":{},"headers":[],"relativePath":"code/golang/designer/02_adapter/README.md","filePath":"code/golang/designer/02_adapter/README.md","lastUpdated":1744879674000}'),c={name:"code/golang/designer/02_adapter/README.md"};function r(p,e,n,s,_,i){return o(),d("div",null,e[0]||(e[0]=[t('<h1 id="适配器模式" tabindex="-1">适配器模式 <a class="header-anchor" href="#适配器模式" aria-label="Permalink to &quot;适配器模式&quot;">​</a></h1><p>适配器模式用于转换一种接口适配另一种接口。</p><p>实际使用中 <code>Adaptee</code> 一般为接口，并且使用工厂函数生成实例。</p><p>在 <code>Adapter</code> 中匿名组合 <code>Adaptee</code> 接口，所以 <code>Adapter</code> 类也拥有 <code>SpecificRequest</code> 实例方法，又因为 <code>Go</code> 语言中非入侵式接口特征，其实 <code>Adapter</code> 也适配 <code>Adaptee</code> 接口。</p>',4)]))}const g=a(c,[["render",r]]);export{A as __pageData,g as default};
