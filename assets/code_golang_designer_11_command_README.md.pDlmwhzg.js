import{j as t,c as a,b as o,ag as n}from"./chunks/framework.BlzMDYBM.js";const m=JSON.parse('{"title":"命令模式","description":"","frontmatter":{},"headers":[],"relativePath":"code/golang/designer/11_command/README.md","filePath":"code/golang/designer/11_command/README.md","lastUpdated":1744879674000}'),l={name:"code/golang/designer/11_command/README.md"};function r(i,e,d,s,_,p){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to &quot;命令模式&quot;">​</a></h1><p>命令模式本质是把某个对象的方法调用封装到对象中，方便传递、存储、调用。</p><p>示例中把主板单中的启动(start)方法和重启(reboot)方法封装为命令对象，再传递到主机(box)对象中。于两个按钮进行绑定：</p><ul><li>第一个机箱(box1)设置按钮1(button1) 为开机按钮2(button2)为重启。</li><li>第二个机箱(box1)设置按钮2(button2) 为开机按钮1(button1)为重启。</li></ul><p>从而得到配置灵活性。</p><p>除了配置灵活外，使用命令模式还可以用作：</p><ul><li>批处理</li><li>任务队列</li><li>undo, redo</li></ul><p>等把具体命令封装到对象中使用的场合</p>',8)]))}const u=t(l,[["render",r]]);export{m as __pageData,u as default};
