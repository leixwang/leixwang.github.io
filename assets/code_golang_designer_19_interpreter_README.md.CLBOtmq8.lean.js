import{j as a,c as r,b as n,q as e,f as o}from"./chunks/framework.BlzMDYBM.js";const g=JSON.parse('{"title":"解释器模式","description":"","frontmatter":{},"headers":[],"relativePath":"code/golang/designer/19_interpreter/README.md","filePath":"code/golang/designer/19_interpreter/README.md","lastUpdated":1744879674000}'),s={name:"code/golang/designer/19_interpreter/README.md"};function d(l,t,i,c,p,_){return n(),r("div",null,t[0]||(t[0]=[e("h1",{id:"解释器模式",tabindex:"-1"},[o("解释器模式 "),e("a",{class:"header-anchor",href:"#解释器模式","aria-label":'Permalink to "解释器模式"'},"​")],-1),e("p",null,"解释器模式定义一套语言文法，并设计该语言解释器，使用户能使用特定文法控制解释器行为。",-1),e("p",null,"解释器模式的意义在于，它分离多种复杂功能的实现，每个功能只需关注自身的解释。",-1),e("p",null,"对于调用者不用关心内部的解释器的工作，只需要用简单的方式组合命令就可以。",-1)]))}const m=a(s,[["render",d]]);export{g as __pageData,m as default};
