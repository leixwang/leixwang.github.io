import{j as a,c as e,b as n,ag as t}from"./chunks/framework.BlzMDYBM.js";const u=JSON.parse('{"title":"kvmla 配置","description":"","frontmatter":{},"headers":[],"relativePath":"linux/ubuntu-command.md","filePath":"linux/ubuntu-command.md","lastUpdated":1744879674000}'),i={name:"linux/ubuntu-command.md"};function p(l,s,r,o,c,h){return n(),e("div",null,s[0]||(s[0]=[t(`<h1 id="kvmla-配置" tabindex="-1">kvmla 配置 <a class="header-anchor" href="#kvmla-配置" aria-label="Permalink to &quot;kvmla 配置&quot;">​</a></h1><p>web : meteor user ritter : build user</p><h3 id="创建一个sudo用户" tabindex="-1">创建一个sudo用户 <a class="header-anchor" href="#创建一个sudo用户" aria-label="Permalink to &quot;创建一个sudo用户&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># adduser &#39;ritter&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># adduser ritter sudo </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># adduser ritter root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># adduser ritter ssh</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="重新指定语言" tabindex="-1">重新指定语言 <a class="header-anchor" href="#重新指定语言" aria-label="Permalink to &quot;重新指定语言&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> localepurge</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> locale-gen</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> en_US.UTF-8</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> zh_CN.UTF-8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> locale</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    //查看本地语言</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="自动补齐" tabindex="-1">自动补齐 <a class="header-anchor" href="#自动补齐" aria-label="Permalink to &quot;自动补齐&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> bash-completion</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --reinstall</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> bash-completion</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /etc/skel/.bashrc</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> ~/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> .</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> ~/.bashrc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="安装fish" tabindex="-1">安装fish <a class="header-anchor" href="#安装fish" aria-label="Permalink to &quot;安装fish&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> fish</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> fish</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="update" tabindex="-1">update <a class="header-anchor" href="#update" aria-label="Permalink to &quot;update&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>$ sudo apt-get update</span></span>
<span class="line"><span>E: The method driver /usr/lib/apt/methods/http could not be found.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Fixed:</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> apt-transport-https</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> update</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="将程序放到后台运行" tabindex="-1">将程序放到后台运行 <a class="header-anchor" href="#将程序放到后台运行" aria-label="Permalink to &quot;将程序放到后台运行&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> nohup</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> meteor</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> &amp;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="安装shadowsocks" tabindex="-1">安装ShadowSocks <a class="header-anchor" href="#安装shadowsocks" aria-label="Permalink to &quot;安装ShadowSocks&quot;">​</a></h2><p>简介<code>Shadowsocks</code>安装配置过程。</p><h3 id="ubuntu-安装方法" tabindex="-1">ubuntu 安装方法 <a class="header-anchor" href="#ubuntu-安装方法" aria-label="Permalink to &quot;ubuntu 安装方法&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span> $ sudo apt-get update </span></span>
<span class="line"><span> $ sudo apt-get install python-pip</span></span>
<span class="line"><span> $ sudo apt-get shadowsocks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h3><p>需要在<code>/etc/</code>目录下创建一个<code>shadowsocks.json</code>的文件, 配置文件内容如下:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;server&quot;:&quot;my_server_ip&quot;,</span></span>
<span class="line"><span>    &quot;server_port&quot;:8388,</span></span>
<span class="line"><span>    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span></span>
<span class="line"><span>    &quot;local_port&quot;:1080,</span></span>
<span class="line"><span>    &quot;password&quot;:&quot;mypassword&quot;,</span></span>
<span class="line"><span>    &quot;timeout&quot;:300,</span></span>
<span class="line"><span>    &quot;method&quot;:&quot;rc4-md5&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>各字段的含义：</p><table tabindex="0"><thead><tr><th style="text-align:left;">name</th><th style="text-align:center;">info</th></tr></thead><tbody><tr><td style="text-align:left;">server</td><td style="text-align:center;">服务器 IP (IPv4/IPv6)，注意这也将是服务端监听的 IP 地址</td></tr><tr><td style="text-align:left;">server_port</td><td style="text-align:center;">服务器端口</td></tr><tr><td style="text-align:left;">local_port</td><td style="text-align:center;">本地端端口</td></tr><tr><td style="text-align:left;">password</td><td style="text-align:center;">用来加密的密码</td></tr><tr><td style="text-align:left;">timeout</td><td style="text-align:center;">超时时间（秒）</td></tr><tr><td style="text-align:left;">method</td><td style="text-align:center;">加密方法，&quot;rc4-md5&quot;</td></tr></tbody></table><h3 id="运行方法" tabindex="-1">运行方法 <a class="header-anchor" href="#运行方法" aria-label="Permalink to &quot;运行方法&quot;">​</a></h3><p>如果想直接在命令行下运行, 如果要停止运行，将命令中的start改成stop。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>$ sudo ssserver -c /etc/shadowsocks.json -d start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="配置开机自启动" tabindex="-1">配置开机自启动 <a class="header-anchor" href="#配置开机自启动" aria-label="Permalink to &quot;配置开机自启动&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>$ sudo chmod 755 /etc/shadowsocks.json</span></span>
<span class="line"><span>$ sudo apt–get install python–m2crypto   //安装支持算法的库</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>需要将启动项增加到, 启动文件中.</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>$ sudo vi /etc/rc.local</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/usr/local/bin/ssserver –c /etc/shadowsocks.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="ubuntu-config" tabindex="-1">Ubuntu config <a class="header-anchor" href="#ubuntu-config" aria-label="Permalink to &quot;Ubuntu config&quot;">​</a></h1><h2 id="语言设置" tabindex="-1">语言设置 <a class="header-anchor" href="#语言设置" aria-label="Permalink to &quot;语言设置&quot;">​</a></h2><p>如果没有设置好语言启动不了<code>meteor</code>, 会显示<code>mongoDB</code>服务启动失败.</p><p>解决方法如下:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>$ sudo apt-get install locales</span></span>
<span class="line"><span>$ sudo locale-gen en_US.UTF-8</span></span>
<span class="line"><span>$ sudo localedef -i en_GB -f UTF-8 en_US.UTF-8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="http-转-https-服务器配置" tabindex="-1">http 转 https 服务器配置 <a class="header-anchor" href="#http-转-https-服务器配置" aria-label="Permalink to &quot;http 转 https 服务器配置&quot;">​</a></h1><h2 id="开发机配置" tabindex="-1">开发机配置 <a class="header-anchor" href="#开发机配置" aria-label="Permalink to &quot;开发机配置&quot;">​</a></h2><p>修改/etc/hosts，加上：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>127.0.0.1 dev.badui.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="推荐一个频繁切换hosts的小工具-switchhosts" tabindex="-1">推荐一个频繁切换hosts的小工具[<a href="http://oldj.github.io/SwitchHosts/" target="_blank" rel="noreferrer">SwitchHosts</a>] <a class="header-anchor" href="#推荐一个频繁切换hosts的小工具-switchhosts" aria-label="Permalink to &quot;推荐一个频繁切换hosts的小工具[[SwitchHosts](http://oldj.github.io/SwitchHosts/)]&quot;">​</a></h4><p><img src="https://cloud.githubusercontent.com/assets/4111893/26032565/0e388dd2-38c9-11e7-8230-c595534dec95.png" alt=""></p><hr><p>在本地安装nginx，配置文件加上：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>map $http_upgrade $connection_upgrade {</span></span>
<span class="line"><span>    default upgrade;</span></span>
<span class="line"><span>    &#39;&#39;      close;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>	server_name dev.badui.com;</span></span>
<span class="line"><span>	listen 80;</span></span>
<span class="line"><span>	return 301 https://$host$request_uri;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>	server_name dev.badui.com;</span></span>
<span class="line"><span>	listen 443 ssl;</span></span>
<span class="line"><span>	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span></span>
<span class="line"><span>	ssl_ciphers &#39;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&#39;;</span></span>
<span class="line"><span>	ssl_prefer_server_ciphers on;</span></span>
<span class="line"><span>	ssl_session_timeout 5m;</span></span>
<span class="line"><span>	ssl_session_cache shared:SSL:50m;</span></span>
<span class="line"><span>	ssl_session_tickets off;</span></span>
<span class="line"><span>	ssl_certificate cert/xxx.pem;</span></span>
<span class="line"><span>	ssl_certificate_key cert/xxx.key;</span></span>
<span class="line"><span>	add_header Strict-Transport-Security &quot;max-age=31536000&quot;;</span></span>
<span class="line"><span>	location / {</span></span>
<span class="line"><span>		proxy_pass http://127.0.0.1:3000;</span></span>
<span class="line"><span>        	proxy_http_version 1.1;</span></span>
<span class="line"><span>        	proxy_set_header   Upgrade          $http_upgrade;</span></span>
<span class="line"><span>        	proxy_set_header   Connection       $connection_upgrade;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        	proxy_set_header   Host             $host;</span></span>
<span class="line"><span>        	proxy_set_header   X-Real-IP        $remote_addr;</span></span>
<span class="line"><span>        	proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>        	proxy_set_header   X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        	proxy_buffering off;</span></span>
<span class="line"><span>        	proxy_buffer_size  128k;</span></span>
<span class="line"><span>        	proxy_buffers   32 32k;</span></span>
<span class="line"><span>        	proxy_busy_buffers_size 128k;</span></span>
<span class="line"><span>        	proxy_connect_timeout 1200s;</span></span>
<span class="line"><span>        	proxy_read_timeout 1200s;</span></span>
<span class="line"><span>        	proxy_send_timeout 1200s;</span></span>
<span class="line"><span>        	proxy_redirect off;</span></span>
<span class="line"><span>        	proxy_next_upstream error timeout invalid_header http_500 http_503 http_404;</span></span>
<span class="line"><span>        	expires 1d;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>如果你发现证书过期了，去服务器上取一个最新的证书，顺便帮忙更新一下本文。</p><p>用devlive的配置，在默认的3000端口启动meteor:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>ROOT_URL=https://dev.badui.com meteor --settings .deploy/dev/settings-dev.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在微信web开发者工具中可以通过公众号网页授权登录前台页面 <a href="https://dev.badui.com" target="_blank" rel="noreferrer">https://dev.badui.com</a></p><p>在Chrome中可以通过微信扫码登录前台 <a href="https://dev.badui.com" target="_blank" rel="noreferrer">https://dev.badui.com</a> 或后台 <a href="https://dev.badui.com/admin" target="_blank" rel="noreferrer">https://dev.badui.com/admin</a></p><h2 id="在手机上调试" tabindex="-1">在手机上调试 <a class="header-anchor" href="#在手机上调试" aria-label="Permalink to &quot;在手机上调试&quot;">​</a></h2><p>手机要改hosts需要越狱，要拿开发机做proxy也经常不灵。所以最省事的办法是配置一台无线路由器，让开发机和手机都通过这个无线路由器上网。在路由器上改域名解析，比如极路由可以装一个插件叫“自定义hosts”，在里面加一条“192.168.199.101 dev.badui.com”即可。</p><h2 id="调试微信支付" tabindex="-1">调试微信支付 <a class="header-anchor" href="#调试微信支付" aria-label="Permalink to &quot;调试微信支付&quot;">​</a></h2><p>除了设置上述手机调试步骤之外，微信支付的统一下单接口有个notify_url参数，是异步接收微信支付结果通知的回调地址，由于回调地址必须为外网可访问的url，可以用ngrok做一个tunnel，notify_url参数填ngrok生成的url，这样本地程序就能接收到回调的通知了。注意在提交代码时把notify_url改回服务器的地址，比如 <a href="https://dev.badui.com/pay-cb" target="_blank" rel="noreferrer">https://dev.badui.com/pay-cb</a> 。</p><h2 id="调试公众号消息接口" tabindex="-1">调试公众号消息接口 <a class="header-anchor" href="#调试公众号消息接口" aria-label="Permalink to &quot;调试公众号消息接口&quot;">​</a></h2><p>这个就复杂了。公众号消息高度依赖回调，而且回调地址是在公众号后台填写的，必须是已备案的域名，而ngrok生成的域名没法备案，所以就行不通了。有一个办法是在服务器上自己做这个tunnel，这样就可以用服务器的已备案域名来接收回调并tunnel到本地（参考 <a href="https://blog.rodneyrehm.de/archives/38-You-may-not-need-localtunnel-or-ngrok.html" target="_blank" rel="noreferrer">https://blog.rodneyrehm.de/archives/38-You-may-not-need-localtunnel-or-ngrok.html</a> ）。但这样调试必然影响公众号的正常服务，所以只能在测试用的公众号上做。</p><p>Ubuntu 16.04下Shadowsocks服务器端安装及优化 2017-06-13 47716 其他 shadowsocks, bbr, systemd 84 前言 本教程旨在提供简明的Ubuntu 16.04下安装服务器端Shadowsocks。不同于Ubuntu 16.04之前的教程，本文抛弃initd，转而使用Ubuntu 16.04支持的Systemd管理Shadowsocks的启动与停止，显得更为便捷。优化部分包括BBR、TCP Fast Open以及吞吐量优化。</p><p>本教程仅适用于Ubuntu 16.04及之后的版本，基于Python 3，支持IPv6。</p><p>安装pip 本教程使用Python 3为载体，因Python 3对应的包管理器pip3并未预装，首先安装pip3：</p><p>Bash sudo apt install python3-pip 安装Shadowsocks 因Shadowsocks作者不再维护pip中的Shadowsocks（定格在了2.8.2），我们使用下面的命令来安装最新版的Shadowsocks：</p><p>Bash pip3 install <a href="https://github.com/shadowsocks/shadowsocks/archive/master.zip" target="_blank" rel="noreferrer">https://github.com/shadowsocks/shadowsocks/archive/master.zip</a> 安装完成后可以使用下面这个命令查看Shadowsocks版本：</p><p>Bash sudo ssserver --version 目前会显示“Shadowsocks 3.0.0”。</p><p>创建配置文件 创建Shadowsocks配置文件所在文件夹：</p><p>Bash sudo mkdir /etc/shadowsocks 然后创建配置文件：</p><p>Bash sudo nano /etc/shadowsocks/config.json 复制粘贴如下内容（注意修改密码“password”）：</p><p>JSON { &quot;server&quot;:&quot;::&quot;, &quot;server_port&quot;:8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;mypassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false } 然后按Ctrl + O保存文件，Ctrl + X退出。</p><p>测试Shadowsocks配置 首先记录下服务器的IP地址</p><p>Bash ifconfig 找到IPv4地址（和IPv6地址），如我的ifconfig输出为</p><p>eth0 Link encap:Ethernet HWaddr 46:91:89:4e:c1:52 inet addr:138.68.51.55 Bcast:138.68.63.255 Mask:255.255.240.0 inet6 addr: fe80::4491:89ff:fe4e:c152/64 Scope:Link inet6 addr: 2604:a880:2:d0::3727:7001/64 Scope:Global UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:102667 errors:0 dropped:0 overruns:0 frame:0 TX packets:7869 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:151166937 (151.1 MB) TX bytes:1151476 (1.1 MB) 所以我的IPv4地址是138.68.51.55，IPv6地址是2604:a880:2:d0::3727:7001。</p><p>然后来测试下Shadowsocks能不能正常工作了：</p><p>Bash ssserver -c /etc/shadowsocks/config.json 在Shadowsocks客户端添加服务器，如果你使用的是我提供的那个配置文件的话，地址填写你的IPv4地址或IPv6地址，端口号为8388，加密方法为aes-256-cfb，密码为你设置的密码。然后设置客户端使用全局模式，浏览器登录Google试试应该能直接打开了。</p><p>这时浏览器登录<a href="http://ip138.com/%E5%B0%B1%E4%BC%9A%E6%98%BE%E7%A4%BAShadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84IP%E5%95%A6%EF%BC%81" target="_blank" rel="noreferrer">http://ip138.com/就会显示Shadowsocks服务器的IP啦！</a></p><p>测试完毕，按Ctrl + C关闭Shadowsocks。</p><p>配置Systemd管理Shadowsocks 新建Shadowsocks管理文件</p><p>Bash sudo nano /etc/systemd/system/shadowsocks-server.service 复制粘贴：</p><p>[Unit] Description=Shadowsocks Server After=network.target</p><p>[Service] ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json Restart=on-abort</p><p>[Install] WantedBy=multi-user.target Ctrl + O保存文件，Ctrl + X退出。</p><p>启动Shadowsocks：</p><p>Bash sudo systemctl start shadowsocks-server 设置开机启动Shadowsocks：</p><p>Bash sudo systemctl enable shadowsocks-server 至此，Shadowsock服务器端的基本配置已经全部完成了！</p><p>优化 这部分属于进阶操作，在你使用Shadowsocks时感觉到延迟较大，或吞吐量较低时，可以考虑对服务器端进行优化。</p><p>开启BBR BBR系Google最新开发的TCP拥塞控制算法，目前有着较好的带宽提升效果，甚至不比老牌的锐速差。</p><p>升级Linux内核 BBR在Linux kernel 4.9引入。首先检查服务器kernel版本：</p><p>Bash uname -r 如果其显示版本在4.9.0之下，则需要升级Linux内核，否则请忽略下文。</p><p>更新包管理器：</p><p>Bash sudo apt update 查看可用的Linux内核版本：</p><p>Bash sudo apt-cache showpkg linux-image 找到一个你想要升级的Linux内核版本，如“linux-image-4.10.0-22-generic”：</p><p>Bash sudo apt install linux-image-4.10.0-22-generic 等待安装完成后重启服务器：</p><p>Bash sudo reboot 删除老的Linux内核：</p><p>Bash sudo purge-old-kernels 开启BBR 运行lsmod | grep bbr，如果结果中没有tcp_bbr，则先运行：</p><p>Bash modprobe tcp_bbr echo &quot;tcp_bbr&quot; &gt;&gt; /etc/modules-load.d/modules.conf 运行：</p><p>Bash echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf 运行：</p><p>Bash sysctl -p 保存生效。运行：</p><p>Bash sysctl net.ipv4.tcp_available_congestion_control sysctl net.ipv4.tcp_congestion_control 若均有bbr，则开启BBR成功。</p><p>优化吞吐量 新建配置文件：</p><p>Bash sudo nano /etc/sysctl.d/local.conf 复制粘贴：</p><h1 id="max-open-files" tabindex="-1">max open files <a class="header-anchor" href="#max-open-files" aria-label="Permalink to &quot;max open files&quot;">​</a></h1><p>fs.file-max = 51200</p><h1 id="max-read-buffer" tabindex="-1">max read buffer <a class="header-anchor" href="#max-read-buffer" aria-label="Permalink to &quot;max read buffer&quot;">​</a></h1><p>net.core.rmem_max = 67108864</p><h1 id="max-write-buffer" tabindex="-1">max write buffer <a class="header-anchor" href="#max-write-buffer" aria-label="Permalink to &quot;max write buffer&quot;">​</a></h1><p>net.core.wmem_max = 67108864</p><h1 id="default-read-buffer" tabindex="-1">default read buffer <a class="header-anchor" href="#default-read-buffer" aria-label="Permalink to &quot;default read buffer&quot;">​</a></h1><p>net.core.rmem_default = 65536</p><h1 id="default-write-buffer" tabindex="-1">default write buffer <a class="header-anchor" href="#default-write-buffer" aria-label="Permalink to &quot;default write buffer&quot;">​</a></h1><p>net.core.wmem_default = 65536</p><h1 id="max-processor-input-queue" tabindex="-1">max processor input queue <a class="header-anchor" href="#max-processor-input-queue" aria-label="Permalink to &quot;max processor input queue&quot;">​</a></h1><p>net.core.netdev_max_backlog = 4096</p><h1 id="max-backlog" tabindex="-1">max backlog <a class="header-anchor" href="#max-backlog" aria-label="Permalink to &quot;max backlog&quot;">​</a></h1><p>net.core.somaxconn = 4096</p><h1 id="resist-syn-flood-attacks" tabindex="-1">resist SYN flood attacks <a class="header-anchor" href="#resist-syn-flood-attacks" aria-label="Permalink to &quot;resist SYN flood attacks&quot;">​</a></h1><p>net.ipv4.tcp_syncookies = 1</p><h1 id="reuse-timewait-sockets-when-safe" tabindex="-1">reuse timewait sockets when safe <a class="header-anchor" href="#reuse-timewait-sockets-when-safe" aria-label="Permalink to &quot;reuse timewait sockets when safe&quot;">​</a></h1><p>net.ipv4.tcp_tw_reuse = 1</p><h1 id="turn-off-fast-timewait-sockets-recycling" tabindex="-1">turn off fast timewait sockets recycling <a class="header-anchor" href="#turn-off-fast-timewait-sockets-recycling" aria-label="Permalink to &quot;turn off fast timewait sockets recycling&quot;">​</a></h1><p>net.ipv4.tcp_tw_recycle = 0</p><h1 id="short-fin-timeout" tabindex="-1">short FIN timeout <a class="header-anchor" href="#short-fin-timeout" aria-label="Permalink to &quot;short FIN timeout&quot;">​</a></h1><p>net.ipv4.tcp_fin_timeout = 30</p><h1 id="short-keepalive-time" tabindex="-1">short keepalive time <a class="header-anchor" href="#short-keepalive-time" aria-label="Permalink to &quot;short keepalive time&quot;">​</a></h1><p>net.ipv4.tcp_keepalive_time = 1200</p><h1 id="outbound-port-range" tabindex="-1">outbound port range <a class="header-anchor" href="#outbound-port-range" aria-label="Permalink to &quot;outbound port range&quot;">​</a></h1><p>net.ipv4.ip_local_port_range = 10000 65000</p><h1 id="max-syn-backlog" tabindex="-1">max SYN backlog <a class="header-anchor" href="#max-syn-backlog" aria-label="Permalink to &quot;max SYN backlog&quot;">​</a></h1><p>net.ipv4.tcp_max_syn_backlog = 4096</p><h1 id="max-timewait-sockets-held-by-system-simultaneously" tabindex="-1">max timewait sockets held by system simultaneously <a class="header-anchor" href="#max-timewait-sockets-held-by-system-simultaneously" aria-label="Permalink to &quot;max timewait sockets held by system simultaneously&quot;">​</a></h1><p>net.ipv4.tcp_max_tw_buckets = 5000</p><h1 id="turn-on-tcp-fast-open-on-both-client-and-server-side" tabindex="-1">turn on TCP Fast Open on both client and server side <a class="header-anchor" href="#turn-on-tcp-fast-open-on-both-client-and-server-side" aria-label="Permalink to &quot;turn on TCP Fast Open on both client and server side&quot;">​</a></h1><p>net.ipv4.tcp_fastopen = 3</p><h1 id="tcp-receive-buffer" tabindex="-1">TCP receive buffer <a class="header-anchor" href="#tcp-receive-buffer" aria-label="Permalink to &quot;TCP receive buffer&quot;">​</a></h1><p>net.ipv4.tcp_rmem = 4096 87380 67108864</p><h1 id="tcp-write-buffer" tabindex="-1">TCP write buffer <a class="header-anchor" href="#tcp-write-buffer" aria-label="Permalink to &quot;TCP write buffer&quot;">​</a></h1><p>net.ipv4.tcp_wmem = 4096 65536 67108864</p><h1 id="turn-on-path-mtu-discovery" tabindex="-1">turn on path MTU discovery <a class="header-anchor" href="#turn-on-path-mtu-discovery" aria-label="Permalink to &quot;turn on path MTU discovery&quot;">​</a></h1><p>net.ipv4.tcp_mtu_probing = 1</p><p>net.ipv4.tcp_congestion_control = bbr 运行：</p><p>Bash sysctl --system 编辑之前的shadowsocks-server.service文件：</p><p>Bash sudo nano /etc/systemd/system/shadowsocks-server.service 在ExecStart前插入一行，内容为：</p><p>ExecStartPre=/bin/sh -c &#39;ulimit -n 51200&#39; 即修改后的shadowsocks-server.service内容为：</p><p>[Unit] Description=Shadowsocks Server After=network.target</p><p>[Service] ExecStartPre=/bin/sh -c &#39;ulimit -n 51200&#39; ExecStart=/usr/local/bin/ssserver -c /etc/shadowsocks/config.json Restart=on-abort</p><p>[Install] WantedBy=multi-user.target Ctrl + O保存文件，Ctrl + X退出。</p><p>重载shadowsocks-server.service：</p><p>Bash sudo systemctl daemon-reload 重启Shadowsocks：</p><p>Bash sudo systemctl restart shadowsocks-server 开启TCP Fast Open TCP Fast Open可以降低Shadowsocks服务器和客户端的延迟。实际上在上一步已经开启了TCP Fast Open，现在只需要在Shadowsocks配置中启用TCP Fast Open。</p><p>编辑config.json：</p><p>Bash sudo nano /etc/shadowsocks/config.json 将fast_open的值由false修改为true。Ctrl + O保存文件，Ctrl + X退出。</p><p>重启Shadowsocks：</p><p>Bash sudo systemctl restart shadowsocks-server 注意：TCP Fast Open同时需要客户端的支持，即客户端Linux内核版本为3.7.1及以上；你可以在Shadowsocks客户端中启用TCP Fast Open。</p><p>至此，Shadowsock服务器端的优化已经全部完成了！</p>`,151)]))}const b=a(i,[["render",p]]);export{u as __pageData,b as default};
