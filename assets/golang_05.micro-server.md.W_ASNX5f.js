import{j as i,c as a,b as n,ag as l}from"./chunks/framework.BlzMDYBM.js";const p="/images/golang/1563802988667.png",h="/images/golang/1564056754698.png",t="/images/golang/1564058423216.png",e="/images/golang/1564061722380.png",k="/images/golang/1564372623923.png",r="/images/golang/1564373553013.png",d="/images/golang/1564396573015.png",g="/images/golang/1564628074411.png",c="/images/golang/1564652925915.png",y="/images/golang/1564539159120.png",o="/images/golang/1538379054131.png",b="/images/golang/1538379597103.png",F="/images/golang/1538380442745.png",u="/images/golang/1561950926758.png",C="/images/golang/1565103071456.png",E="/images/golang/1565106650464.png",m="/images/golang/1565106804694.png",A="/images/golang/1565107450324.png",D="/images/golang/1565108115509.png",S=JSON.parse('{"title":"微服务（micro services）","description":"","frontmatter":{"sidebar_position":5},"headers":[],"relativePath":"golang/05.micro-server.md","filePath":"golang/05.micro-server.md","lastUpdated":1744879674000}'),v={name:"golang/05.micro-server.md"};function q(f,s,P,w,x,R){return n(),a("div",null,s[0]||(s[0]=[l('<h1 id="微服务-micro-services" tabindex="-1">微服务（micro services） <a class="header-anchor" href="#微服务-micro-services" aria-label="Permalink to &quot;微服务（micro services）&quot;">​</a></h1><p><img src="'+p+'" alt="1563802988667"></p><p>​ 近几年,微服这个词闯入了我们的视线范围。在百度与谷歌中随便搜一搜也有几千万条的结果。那么，什么是微服务呢？微服务的概念是怎么产生的呢？ ​ 我们首先来了解一下Go语言与微服务的千丝万缕与来龙去脉。</p><h2 id="_1-1-什么是微服务" tabindex="-1">1.1 什么是微服务？ <a class="header-anchor" href="#_1-1-什么是微服务" aria-label="Permalink to &quot;1.1 什么是微服务？&quot;">​</a></h2><blockquote><p>服务拆分原则：高内聚低耦合</p></blockquote><p>​ 在介绍微服务时，首先得先理解什么是微服务，顾名思义，微服务得从两个方面去理解，什么是&quot;微&quot;、什么是&quot;服务&quot;？</p><p>​ 微（micro）狭义来讲就是体积小，著名的&quot;2 pizza 团队&quot;很好的诠释了这一解释（2 pizza 团队最早是亚马逊 CEO Bezos提出来的，意思是说单个服务的设计，所有参与人从设计、开发、测试、运维所有人加起来 只需要2个披萨就够了 ）。</p><p>​ 服务（service）一定要区别于系统，服务一个或者一组相对较小且独立的功能单元，是用户可以感知最小功能集。</p><p>那么广义上来讲，微服务是一种分布式系统解决方案，推动细粒度服务的使用，这些服务协同工作。</p><h2 id="_1-2-微服务这个概念的由来" tabindex="-1">1.2 微服务这个概念的由来 <a class="header-anchor" href="#_1-2-微服务这个概念的由来" aria-label="Permalink to &quot;1.2 微服务这个概念的由来&quot;">​</a></h2><p>​ 据说，早在19xx,非IT行业提出的概念，在威尼斯附近的软件架构师讨论会上，就有人提出了微服务架构设计的概念，用它来描述与会者所见的一种通用的架构设计风格。时隔一年之后，在同一个讨论会上，大家决定将这种架构设计风格用微服务架构来表示。</p><p>​ 起初，对微服务的概念，没有一个明确的定义，大家只能从各自的角度说出了微服务的理解和看法。</p><p>​ 在2014年3月，詹姆斯·刘易斯（James Lewis）与马丁·福勒（Martin Fowler）所发表的一篇博客中，总结了微服务架构设计的一些共同特点，这应该是一个对微服务比较全面的描述。</p><p>​ 原文链接 <a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noreferrer">https://martinfowler.com/articles/microservices.html</a></p><p>​ 这篇文章中认为：<strong>“简而言之，微服务架构风格是将单个应用程序作为一组小型服务开发的方法，每个服务程序都在自己的进程中运行，并与轻量级机制（通常是HTTP资源API）进行通信。这些服务是围绕业务功能构建的。可以通过全自动部署机器独立部署。这些服务器可以用不同的编程语言编写，使用不同的数据存储技术，并尽量不用集中式方式进行管理”</strong></p><p>​ 在这里我们可能会混淆一个点，那就是微服务和微服务架构，这是两个不同的概念，而我们平时说到的微服务已经包含了这两个概念了，我们需要把它们说清楚以免学习中纠结。微服务架构是一种设计方法，而微服务这是指使用这种方法而设计的一个应用。所以我们必要对微服务的概念做出一个比较明确的定义。</p><p>​ <strong>微服务架构</strong>是将复杂的系统使用组件化的方式进行拆分，并使用轻量级通讯方式进行整合的一种设计方法。</p><p>​ <strong>微服务</strong>是通过这种架构设计方法拆分出来的一个独立的组件化的小应用。</p><p>​ 微服务架构定义的精髓，可以用一句话来描述，那就是“<strong>分而治之，合而用之</strong>”。将复杂的系统进行拆分的方法，就是“分而治之”。分而治之，可以让复杂的事情变的简单，这很符合我们平时处理问题的方法。 使用轻量级通讯等方式进行整合的设计，就是“合而用之”的方法，合而用之可以让微小的力量变动强大。</p><h2 id="_1-3-微服务和单体式架构区别" tabindex="-1">1.3 微服务和单体式架构区别 <a class="header-anchor" href="#_1-3-微服务和单体式架构区别" aria-label="Permalink to &quot;1.3 微服务和单体式架构区别&quot;">​</a></h2><p>​ 和微服务架构相反的就是单体式架构，我们来看看单体式架构设计的缺点，就更能体会微服务的好处了。单体架构在规模比较小的情况下工作情况良好，但是随着系统规模的扩大，它暴露出来的问题也越来越多，主要有以下几点：</p><p><strong>复杂性逐渐变高</strong></p><blockquote><p>中软国际 boss计费系统 十几年了 移动联通缴费平台 几个亿</p><p>自己封装函数 代码冗余度特别大</p></blockquote><p>比如有几十万行代码的大项目，代码越多复杂性越高，越难解决遇到的问题。</p><p><strong>技术债务逐渐上升</strong></p><blockquote><p>离职证明 留下了64个bug未解决就离职了</p></blockquote><p>​ 公司的人员流动是再正常不过的事情，有的员工在离职之前，疏于代码质量的自我管束，导致留下来很多坑，由于单体项目代码量庞大的惊人，留下的坑很难被发觉，这就给新来的员工带来很大的烦恼，人员流动越大所留下的坑越多，也就是所谓的技术债务越来越多。</p><p><strong>耦合度太高，维护成本大</strong></p><p>​ 当应用程序的功能越来越多、团队越来越大时，沟通成本、管理成本显著增加。当出现 bug 时，可能引起 bug 的原因组合越来越多，导致分析、定位和修复的成本增加；并且在对全局功能缺乏深度理解的情况下，容易在修复 bug 时引入新的 bug。</p><p><strong>持续交付周期长</strong></p><p>​ 构建和部署时间会随着功能的增多而增加，任何细微的修改都会触发部署流水线。新人培养周期长：新成员了解背景、熟悉业务和配置环境的时间越来越长。</p><p><strong>技术选型成本高</strong></p><p>​ 单块架构倾向于采用统一的技术平台或方案来解决所有问题，如果后续想引入新的技术或框架，成本和风险都很大。</p><p><strong>可扩展性差</strong></p><p>​ 随着功能的增加，垂直扩展的成本将会越来越大；而对于水平扩展而言，因为所有代码都运行在同一个进程，没办法做到针对应用程序的部分功能做独立的扩展。</p><p>了解了单体式结构的缺点之后，我们来看看<strong>微服务架构的解决方案：</strong></p><ol><li><p><strong>单一职责</strong></p><p>微服务架构中的每个服务，都是具有业务逻辑的，符合高内聚、低耦合原则以及单一职责原则的单元，不同的服务通过“管道”的方式灵活组合，从而构建出庞大的系统。</p></li><li><p><strong>轻量级通信</strong></p><p>服务之间通过轻量级的通信机制实现互通互联，而所谓的轻量级，通常指语言无关、平台无关的交互方式。</p><p><img src="'+h+'" alt="1564056754698"></p><p>对于轻量级通信的格式而言，我们熟悉的 XML 和 JSON，它们是语言无关、平台无关的；对于通信的协议而言，通常基于 HTTP，能让服务间的通信变得标准化、无状态化。使用轻量级通信机制，可以让团队选择更适合的语言、工具或者平台来开发服务本身。</p></li><li><p><strong>独立性</strong></p><p>每个服务在应用交付过程中，独立地开发、测试和部署。</p><p>在单体式架构中所有功能都在同一个代码库，功能的开发不具有独立性；当不同小组完成多个功能后，需要经过集成和回归测试，测试过程也不具有独立性；当测试完成后，应用被构建成一个包，如果某个功能存在 bug，将导致整个部署失败或者回滚。</p><p><img src="'+t+'" alt="1564058423216"></p><p>在微服务架构中，每个服务都是独立的业务单元，与其他服务高度解耦，只需要改变当前服务本身，就可以完成独立的开发、测试和部署。</p><p><img src="'+e+'" alt="1564061722380"></p></li><li><p><strong>进程隔离</strong></p><p>单块架构中，整个系统运行在同一个进程中，当应用进行部署时，必须停掉当前正在运行的应用，部署完成后再重启进程，无法做到独立部署。</p><p>在微服务架构中，应用程序由多个服务组成，每个服务都是高度自治的独立业务实体，可以运行在独立的进程中，不同的服务能非常容易地部署到不同的主机上。</p></li></ol><p>微服务这么多好处，就没有缺点吗？当然不是这样的，事务都有两面性，我们来看看微服务的不足之处。</p><ol><li><p><strong>运维要求比较高</strong></p><p>对于单体架构来讲，我们只需要维护好这一个项目就可以了，但是对于微服务架构来讲，由于项目是由多个微服务构成的，每个模块出现问题都会造成整个项目运行出现异常，想要知道是哪个模块造成的问题往往是不容易的，因为我们无法一步一步通过debug的方式来跟踪，这就对运维人员提出了很高的要求。</p></li><li><p><strong>分布式的复杂性</strong></p><p>对于单体架构来说，分布式是用来优化项目的，可有可无，但是对于微服务来说，分布式几乎是必会用的技术，由于分布式本身的复杂性，导致微服务架构也变得复杂起来。</p><blockquote><p>bug不好调试</p></blockquote></li><li><p><strong>接口成本高</strong></p><p>比如我们的前面的电商项目每个模块做成微服务的话，用户微服务是要被订单微服务和购物车微服务所调用的，一旦用户微服务的接口发生大的变动，那么所有依赖它的微服务都要做相应的调整，由于微服务可能非常多，那么调整接口所造成的成本将会明显提高。</p></li><li><p><strong>重复劳动</strong></p><p>对于单体架构来讲，如果某段业务被多个模块所共同使用，我们便可以抽象成一个工具类，被所有模块直接调用，但是微服务却无法这样做，因为这个微服务的工具类是不能被其它微服务所直接调用的，从而我们便不得不在每个微服务上都建这么一个工具类，从而导致代码的重复。</p></li><li><p><strong>业务不好分离</strong></p><p>程序员的业务理解程度</p></li></ol><p><strong>既然微服务也有这么多的缺点，那为什么还要用微服务架构呢？</strong></p><ol><li><p><strong>开发简单</strong></p><p>微服务架构将复杂系统进行拆分之后，让每个微服务应用都开发变得非常简单，没有太多的累赘。对于每一个开发者来说，这无疑是一种解脱，因为再也不用进行繁重的劳动了，每天都在一种轻松愉快的氛围中工作，其效率也会整备地提高</p></li><li><p><strong>能够快速相应需求变化</strong></p><p>一般的需求变化都来自于局部功能的改变，这种变化将落实到每个微服务上，二每个微服务的功能相对来说都非常简单，更改起来非常容易，所以微服务非常适合敏捷开发方法，能够快速的影响业务的需求变化。</p></li><li><p><strong>随时随地更新</strong></p></li><li><p>不停服更新</p><p>一方面，微服务的部署和更新并不会影响全局系统的正常运行；另一方面，使用多实例的部署方法，可以做到一个服务的重启和更新在不易察觉的情况下进行。所以每个服务任何时候都可以进行更新部署。</p></li><li><p><strong>系统更加稳定可靠</strong></p><p>微服务运行在一个高可用的分布式环境之中，有配套的监控和调度管理机制，并且还可以提供自由伸缩的管理，充分保障了系统的稳定可靠性</p></li></ol><p><strong>单体式和微服务对比</strong></p><table tabindex="0"><thead><tr><th>新功能开发</th><th>需要时间</th><th>容易开发和实现</th></tr></thead><tbody><tr><td></td><td>传统单体架构</td><td>分布式微服务化架构</td></tr><tr><td>部署</td><td>不经常而且容易部署</td><td>经常发布，部署复杂</td></tr><tr><td>隔离性</td><td>故障影响范围大</td><td>故障影响范围小</td></tr><tr><td>架构设计</td><td>初期技术选型难度大</td><td>设计逻辑难度大</td></tr><tr><td>系统性能</td><td>相对时间快，吞吐量小</td><td>相对时间慢，吞吐量大</td></tr><tr><td>系统运维</td><td>运维难度简单</td><td>运维难度复杂</td></tr><tr><td>新人上手</td><td>学习曲线大（应用逻辑）</td><td>学习曲线大（架构逻辑）</td></tr><tr><td>技术</td><td>技术单一而且封闭</td><td>技术多样而且容易开发</td></tr><tr><td>测试和差错</td><td>简单</td><td>复杂（每个服务都要进行单独测试，还需要集群测试）</td></tr><tr><td>系统扩展性</td><td>扩展性差</td><td>扩展性好</td></tr><tr><td>系统管理</td><td>重点在于开发成本</td><td>重点在于服务治理和调度</td></tr></tbody></table><h1 id="_2-rpc协议" tabindex="-1">2. RPC协议 <a class="header-anchor" href="#_2-rpc协议" aria-label="Permalink to &quot;2. RPC协议&quot;">​</a></h1><p>​ 简单了解了微服务定义和优缺点之后，在我们正式学习微服务框架之前，需要首先了解一下RPC协议。为什么要了解RPC协议？RPC协议具体是什么呢？</p><h2 id="_2-1-rpc的概念" tabindex="-1">2.1 RPC的概念 <a class="header-anchor" href="#_2-1-rpc的概念" aria-label="Permalink to &quot;2.1 RPC的概念&quot;">​</a></h2><p>​ <strong>RPC(Remote Procedure Call Protocol)</strong>，是远程过程调用的缩写，通俗的说就是调用远处的一个函数。与之相对应的是本地函数调用，我们先来看一下本地函数调用。当我们写下如下代码的时候：</p><p>规则</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Add</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们知道，我们传入了1，2两个参数，调用了本地代码中的一个Add函数，得到result这个返回值。这时参数，返回值，代码段都在一个进程空间内，这是本地函数调用。</p><p><strong>那有没有办法，我们能够调用一个跨进程（所以叫&quot;远程&quot;，典型的事例，这个进程部署在另一台服务器上）的函数呢?</strong></p><p><img src="'+k+'" alt="1564372623923"></p><p>这也是RPC主要实现的功能。</p><h2 id="_2-2-为什么微服务需要rpc" tabindex="-1">2.2 为什么微服务需要RPC <a class="header-anchor" href="#_2-2-为什么微服务需要rpc" aria-label="Permalink to &quot;2.2 为什么微服务需要RPC&quot;">​</a></h2><p>我们使用微服务化的一个好处就是，不限定服务的提供方使用什么技术选型，能够实现公司跨团队的技术解耦，如下图：</p><p><img src="'+r+`" alt="1564373553013"></p><p>这样的话，<strong>如果没有统一的服务框架，RPC框架</strong>，各个团队的服务提供方就需要各自实现一套序列化、反序列化、网络框架、连接池、收发线程、超时处理、状态机等“业务之外”的重复技术劳动，造成整体的低效。所以，<strong>统一RPC框架</strong>把上述“业务之外”的技术劳动统一处理，是服务化首要解决的问题。</p><h2 id="_2-3-rpc入门" tabindex="-1">2.3 RPC入门 <a class="header-anchor" href="#_2-3-rpc入门" aria-label="Permalink to &quot;2.3 RPC入门&quot;">​</a></h2><blockquote><p>protobuf</p></blockquote><p>在互联网时代，RPC已经和IPC(进程间通信)一样成为一个不可或缺的基础构件。因此Go语言的标准库也提供了一个简单的RPC实现，我们将以此为入口学习RPC的常见用法。</p><h3 id="_2-3-1-rpc版的-hello-world" tabindex="-1">2.3.1 RPC版的&quot;hello world&quot; <a class="header-anchor" href="#_2-3-1-rpc版的-hello-world" aria-label="Permalink to &quot;2.3.1 RPC版的&quot;hello world&quot;&quot;">​</a></h3><p>Go语言的RPC包的路径为net/rpc，也就是放在了net包目录下面。因此我们可以猜测该RPC包是建立在net包基础之上的。接着我们尝试基于rpc实现一个类似的例子。我们先构造一个HelloService类型，其中的Hello方法用于实现打印功能：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> HelloService</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">request</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">reply</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	*</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;hello:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">	nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>Hello方法方法必须满足Go语言的RPC规则：方法只能有两个可序列化的参数，其中第二个参数是指针类型，并且返回一个error类型，同时必须是公开的方法。</p><p>golang 中的类型比如：channel（通道）、complex（复数类型）、func（函数）均不能进行 序列化</p></blockquote><p>然后就可以将HelloService类型的对象注册为一个RPC服务：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//rpc注册服务  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //注册rpc服务，维护一个hash表，key值是服务名称，value值是服务的地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterName</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HelloService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//设置服务监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	listener,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Listen</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;:1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//接受传输的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	conn,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> listener.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Accept</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//rpc调用,并返回执行后的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //1.read，获取服务名称和方法名，获取请求数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //2.调用对应服务里面的方法，获取传出数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //3.write，把数据返回给client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">ServeConn</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><blockquote><p>其中rpc.Register函数调用会将对象类型中所有满足RPC规则的对象方法注册为RPC函数，所有注册的方法会放在“HelloService”服务空间之下。然后我们建立一个唯一的TCP链接，并且通过rpc.ServeConn函数在该TCP链接上为对方提供RPC服务。</p></blockquote><p>下面是客户端请求HelloService服务的代码：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //用rpc连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	client,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Dial</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;localhost:1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //调用服务中的函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HelloService.Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">reply)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;收到的数据为,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,reply)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>首选是通过rpc.Dial拨号RPC服务，然后通过client.Call调用具体的RPC方法。在调用client.Call时，第一个参数是用点号链接的RPC服务名字和方法名字，第二和第三个参数分别我们定义RPC方法的两个参数。</p></blockquote><h3 id="_2-3-2-跨语言的rpc" tabindex="-1">2.3.2 跨语言的RPC <a class="header-anchor" href="#_2-3-2-跨语言的rpc" aria-label="Permalink to &quot;2.3.2 跨语言的RPC&quot;">​</a></h3><p>​ 标准库的RPC默认采用Go语言特有的gob编码。因此，其它语言调用Go语言实现的RPC服务将比较困难。跨语言是互联网时代RPC的一个首要条件，这里我们再来实现一个跨语言的RPC。得益于RPC的框架设计，Go语言的RPC其实也是很容易实现跨语言支持的。</p><p>​ 这里我们将尝试通过官方自带的net/rpc/jsonrpc扩展实现一个跨语言RPC。</p><p>​ 首先是基于json编码重新实现RPC服务：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //注册rpc服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterName</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HelloService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//设置监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	listener,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Listen</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;:1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //接收连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		conn,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> listener.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Accept</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">			panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//给当前连接提供针对json格式的rpc服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		go</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">ServeCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(jsonrpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewServerCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><blockquote><p>代码中最大的变化是用rpc.ServeCodec函数替代了rpc.ServeConn函数，传入的参数是针对服务端的json编解码器。</p></blockquote><p>然后是实现json版本的客户端：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //简历tcp连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	conn,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Dial</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;localhost:1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//简历基于json编解码的rpc服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	client </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewClientWithCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(jsonrpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewClientCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//调用rpc服务方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HelloService.Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot; world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">reply)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;收到的数据为:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,reply)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote><p>先手工调用net.Dial函数建立TCP链接，然后基于该链接建立针对客户端的json编解码器。</p></blockquote><p>在确保客户端可以正常调用RPC服务的方法之后，我们可以用命令来查看一下客户端发给服务端的到底是什么数据。这里我们使用 ==nc -l 1234== 这条命令 模拟服务器监听1234端口接收的数据，然后重新运行客户端，将会发现nc输出了以下的信息：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">&quot;method&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">&quot;HelloService.Hello&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">&quot;params&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">&quot;hello&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">],</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">&quot;id&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">:0}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>nc常用有两种一种是连接到指定ip和端口</p><p>nc hostname port</p><p>另外一种是监听端口，等待连接</p><p>nc -l port</p></blockquote><p>这是一个json编码的数据，其中method部分对应要调用的rpc服务和方法组合成的名字，params部分的第一个元素为参数，id是由调用端维护的一个唯一的调用编号。</p><p>请求的json数据对象在内部对应两个结构体：客户端是clientRequest，服务端是serverRequest。clientRequest和serverRequest结构体的内容基本是一致的：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> clientRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Method </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">         \`json:&quot;method&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Params []</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}  </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">\`json:&quot;params&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Id     </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint64</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">         \`json:&quot;id&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> serverRequest</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Method </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">           \`json:&quot;method&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Params </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RawMessage</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> \`json:&quot;params&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Id     </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RawMessage</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> \`json:&quot;id&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>了解了客户端需要发送哪些数据之后，我们可以再来看看服务器接收到客户端传输的数据之后会返回哪些数据，还是用我们的nc命令。操作如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &#39;{&quot;method&quot;:&quot;HelloService.Hello&quot;,&quot;params&quot;:[&quot;hello&quot;],&quot;id&quot;:1}&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> nc</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> localhost</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1234</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>返回的数据如下：</p><p><img src="`+d+`" alt="1564396573015"></p><blockquote><p>其中id对应输入的id参数，result为返回的结果，error部分在出问题时表示错误信息。对于顺序调用来说，id不是必须的。但是Go语言的RPC框架支持异步调用，当返回结果的顺序和调用的顺序不一致时，可以通过id来识别对应的调用。</p></blockquote><p>返回的json数据也是对应内部的两个结构体：客户端是clientResponse，服务端是serverResponse。两个结构体的内容同样也是类似的：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> clientResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Id     </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">uint64</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">           \`json:&quot;id&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Result </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RawMessage</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> \`json:&quot;result&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Error  </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}      </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">\`json:&quot;error&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> serverResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Id     </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RawMessage</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> \`json:&quot;id&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Result </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}      </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">\`json:&quot;result&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	Error  </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}      </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">\`json:&quot;error&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>因此无论采用何种语言，只要遵循同样的json结构，以同样的流程就可以和Go语言编写的RPC服务进行通信。这样我们就解用json简单实现了跨语言的RPC。</p><p>但是一般在开发的时候除了用json做跨语言的RPC服务之外，现在很多公司还会选用<strong>protobuf</strong>做跨语言的RPC服务。那什么是<strong>ProtoBuf</strong>呢?接下来我们详细了解一下。</p><h3 id="_2-3-4-rpc协议封装" tabindex="-1">2.3.4 RPC协议封装 <a class="header-anchor" href="#_2-3-4-rpc协议封装" aria-label="Permalink to &quot;2.3.4 RPC协议封装&quot;">​</a></h3><p>上面的代码服务名都是写死的，不够灵活（容易写错），这里我们对RPC的服务端和客户端再次进行一次封装，来屏蔽掉服务名，具体代码如下</p><h5 id="服务端封装" tabindex="-1">服务端封装 <a class="header-anchor" href="#服务端封装" aria-label="Permalink to &quot;服务端封装&quot;">​</a></h5><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//抽离服务名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> serverName </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;LoginService&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义一个父类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RPCDesign</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">	Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//实现工厂函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RegisterRPCServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">srv</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RPCDesign</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterName</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(serverName,srv)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>封装之后的服务端实现如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RpcServer</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//5 + 3i    chan   func    complex</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">this </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RpcServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">resp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	*</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">resp </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> req </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;你好&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	return</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//设置监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	listener, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Listen</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;:8899&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;设置监听错误&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> listener.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;开始监听....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//接收链接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		conn, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> listener.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Accept</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">			fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;获取连接失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">			return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		defer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RemoteAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;连接成功&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//rpc表  注册rpc服务</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RegisterRPCServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RpcServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">			fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;注册rpc服务失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">			return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//把rpc服务和套接字绑定</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//rpc.ServeConn(conn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">ServeCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(jsonrpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewServerCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h5 id="客户端封装" tabindex="-1">客户端封装 <a class="header-anchor" href="#客户端封装" aria-label="Permalink to &quot;客户端封装&quot;">​</a></h5><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RPCClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	rpcClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">rpc</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Client</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> NewRpcClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RPCClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	conn,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Dial</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,addr)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;链接服务器失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RPCClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//套接字和rpc服务绑定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	client </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> rpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewClientWithCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(jsonrpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewClientCodec</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> RPCClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{rpcClient:client}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RPCClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">CallFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">req</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">resp</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> this.rpcClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(serverName</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;.Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,req,resp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>封装之后客户端实现</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//初始化对象  与服务名有关的内容完全封装起来了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	client </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> NewRpcClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;127.0.0.1:8899&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//调用成员函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> temp </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">CallFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;xiaoming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">temp)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(temp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h1 id="_3-protobuf认识与使用" tabindex="-1">3. ProtoBuf认识与使用 <a class="header-anchor" href="#_3-protobuf认识与使用" aria-label="Permalink to &quot;3. ProtoBuf认识与使用&quot;">​</a></h1><h2 id="_3-1-protobuf简介" tabindex="-1">3.1 protobuf简介 <a class="header-anchor" href="#_3-1-protobuf简介" aria-label="Permalink to &quot;3.1 protobuf简介&quot;">​</a></h2><p>Protobuf是Protocol Buffers的简称，它是Google公司开发的一种数据描述语言，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做<strong>数据存储</strong>或 <strong>RPC 数据交换格式</strong>。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API。</p><p>Protobuf刚开源时的定位类似于XML、JSON等数据描述语言，通过附带工具生成代码并实现将结构化数据序列化的功能。这里我们更关注的是Protobuf作为接口规范的描述语言，可以作为设计安全的跨语言RPC接口的基础 工具。</p><blockquote><p>需要了解两点</p><ol><li>protobuf是类似与json一样的数据描述语言（数据格式）</li><li>protobuf非常适合于RPC数据交换格式</li></ol></blockquote><p>接着我们来看一下protobuf的优势和劣势：</p><p>**优势： **</p><p>1：序列化后体积相比Json和XML很小，适合网络传输</p><p>2：支持跨平台多语言</p><p>3：消息格式升级和兼容性还不错</p><p>4：序列化反序列化速度很快，快于Json的处理速度</p><p><strong>劣势：</strong></p><p>1：应用不够广(相比xml和json)</p><p>2：二进制格式导致可读性差</p><p>3：缺乏自描述</p><p>我们先安装一下protobuf，然后通过例子来看一下protobuf的具体作用。</p><h2 id="_3-2-protobuf的安装" tabindex="-1">3.2 protobuf的安装 <a class="header-anchor" href="#_3-2-protobuf的安装" aria-label="Permalink to &quot;3.2 protobuf的安装&quot;">​</a></h2><ol><li><p>下载 protobuf</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">方法一:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> https://github.com/protocolbuffers/protobuf.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">方法二:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">或者将准备好的压缩包进行拖入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">	解压到$GOPATH/src/github.com/protocolbuffers/下面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">	Unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protobuf.zip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>安装（ubuntu）</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">安装依赖工具（联网）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> autoconf</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> automake</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> libtool</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> curl</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> g++</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> libffi-dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">进入protobuf文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protobuf/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">进行安装检测</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 并生成自动安装脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">./autogen.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">./configure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">进行编译C代码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">make</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">进行安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">刷新linux共享库关系</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> ldconfig</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>测试protobuf编译工具</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>如果正常输出 相关指令 没有报任何error，为安装成功</p></blockquote></li><li><p>安装protobuf的go语言插件</p><blockquote><p>由于protobuf并没直接支持go语言需要我们手动安装相关插件</p></blockquote><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">下载</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">方法一:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/golang/protobuf/proto</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">方法二:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">或者将</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com-golang-protobuf.zip拖入</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 进行解压到</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/github.com/golang</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">进入到文件夹内进行编译</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> cd</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/github.com/golang/protobuf/protoc-gen-go</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">将生成的</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protoc-gen-go可执行文件，放在/bin目录下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protoc-gen-go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /bin/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">尝试补齐protoc-gen-go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 如果可以补齐代表成功，如果执行不报错</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 代表工具成功</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ol><h2 id="_3-3-protobuf-简单语法" tabindex="-1">3.3 protobuf 简单语法 <a class="header-anchor" href="#_3-3-protobuf-简单语法" aria-label="Permalink to &quot;3.3 protobuf 简单语法&quot;">​</a></h2><p>参考文档（需翻墙）：<a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noreferrer">https://developers.google.com/protocol-buffers/docs/proto3</a></p><p>首先让我们看一个非常简单的例子。</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">syntax</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;proto3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">; 						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本信息，不指定会报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后期生成go文件的包名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//message为关键字，作用为定义一种消息类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	int32 age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><ul><li>protobuf消息的定义（或者称为描述）通常都写在一个以 .proto 结尾的文件中。</li><li>该文件的第一行指定正在使用<code>proto3</code>语法：如果不这样做，协议缓冲区编译器将假定正在使用proto2。这也必须是文件的第一个非空的非注释行。</li><li>第二行package指明当前是pb包（生成go文件之后和Go的包名保持一致）</li><li>最后message关键字定义一个Person消息体，类似于go语言中的结构体，是包含一系列类型数据的集合。许多标准的简单数据类型都可以作为字段类型，包括<code>bool</code>，<code>int32</code>， <code>float</code>，<code>double</code>，和<code>string</code>。也可以使用其他message类型作为字段类型。</li><li>在message中有一个字符串类型的value成员，该成员编码时用1代替名字。我们知道，在json中是通过成员的名字来绑定对应的数据，但是Protobuf编码却是通过成员的唯一编号来绑定对应的数据，因此Protobuf编码后数据的体积会比较小，能够快速传输，缺点是不利于阅读。</li></ul></blockquote><p><strong>message的格式说明</strong></p><p>消息由至少一个字段组合而成，类似于Go语言中的结构体，每个字段都有一定的格式：</p><div class="language-message格式说明 vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">message格式说明</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span>//注释格式 注释尽量也写在内容上方</span></span>
<span class="line"><span>（字段修饰符）数据类型 字段名称 = 唯一的编号标签值;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><ul><li>唯一的编号标签：代表每个字段的一个唯一的编号标签，在同一个消息里不可以重复。这些编号标签用与在消息二进制格式中标识你的字段，并且消息一旦定义就不能更改。需要说明的是标签在1到15范围的采用一个字节进行编码，所以通常将标签1到15用于频繁发生的消息字段。编号标签大小的范围是1到2的29次。19000-19999是官方预留的值，不能使用。</li><li>注释格式：向.proto文件添加注释，可以使用C/C++/java/Go风格的双斜杠（//） 语法格式或者<code>/*.....*/</code></li></ul></blockquote><p>**message常见的数据类型与go中类型对比 **</p><table tabindex="0"><thead><tr><th>.proto类型</th><th>Go类型</th><th>介绍</th></tr></thead><tbody><tr><td>double</td><td>float64</td><td>64位浮点数</td></tr><tr><td>float</td><td>float32</td><td>32位浮点数</td></tr><tr><td>int32</td><td>int32</td><td>使用可变长度编码。编码负数效率低下——如果你的字段可能有负值，请改用sint32。</td></tr><tr><td>int64</td><td>int64</td><td>使用可变长度编码。编码负数效率低下——如果你的字段可能有负值，请改用sint64。</td></tr><tr><td>uint32</td><td>uint32</td><td>使用可变长度编码。</td></tr><tr><td>uint64</td><td>uint64</td><td>使用可变长度编码。</td></tr><tr><td>sint32</td><td>int32</td><td>使用可变长度编码。符号整型值。这些比常规int32s编码负数更有效。</td></tr><tr><td>sint64</td><td>int64</td><td>使用可变长度编码。符号整型值。这些比常规int64s编码负数更有效。</td></tr><tr><td>fixed32</td><td>uint32</td><td>总是四字节。如果值通常大于228，则比uint 32更有效</td></tr><tr><td>fixed64</td><td>uint64</td><td>总是八字节。如果值通常大于256，则比uint64更有效</td></tr><tr><td>sfixed32</td><td>int32</td><td>总是四字节。</td></tr><tr><td>sfixed64</td><td>int64</td><td>总是八字节。</td></tr><tr><td>bool</td><td>bool</td><td>布尔类型</td></tr><tr><td>string</td><td>string</td><td>字符串必须始终包含UTF - 8编码或7位ASCII文本</td></tr><tr><td>bytes</td><td>[]byte</td><td>可以包含任意字节序列</td></tr></tbody></table><h3 id="_3-3-1protobuf高级用法" tabindex="-1">3.3.1protobuf高级用法 <a class="header-anchor" href="#_3-3-1protobuf高级用法" aria-label="Permalink to &quot;3.3.1protobuf高级用法&quot;">​</a></h3><p>protobuf除了上面的简单类型还有一些复杂的用法，如下：</p><p><strong>message嵌套</strong></p><p>messsage除了能放简单数据类型外，还能存放另外的message类型，如下：</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">syntax</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;proto3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">; 						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本信息，不指定会报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后期生成go文件的包名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//message为关键字，作用为定义一种消息类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> ;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //定义一个message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int64</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>repeated关键字</strong></p><p>repeadted关键字类似与go中的切片，编译之后对应的也是go的切片，用法如下：</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">syntax</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;proto3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">; 						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本信息，不指定会报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后期生成go文件的包名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//message为关键字，作用为定义一种消息类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> ;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //定义一个message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int64</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	repeated</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>默认值</strong></p><p>解析数据时，如果编码的消息不包含特定的单数元素，则解析对象对象中的相应字段将设置为该字段的默认值。不同类型的默认值不同，具体如下：</p><ul><li>对于字符串，默认值为空字符串。</li><li>对于字节，默认值为空字节。</li><li>对于bools，默认值为false。</li><li>对于数字类型，默认值为零。</li><li>对于枚举，默认值是第<strong>一个定义的枚举值</strong>，该<strong>值</strong>必须为0。</li><li>repeated字段默认值是空列表</li><li>message字段的默认值为空对象</li></ul><p><strong>enum关键字</strong></p><p>在定义消息类型时，可能会希望其中一个字段有一个预定义的值列表。比如说，电话号码字段有个类型，这个类型可以是，home,work,mobile。我们可以通过enum在消息定义中添加每个可能值的常量来非常简单的执行此操作。实例如下：</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">syntax</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;proto3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">; 						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本信息，不指定会报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后期生成go文件的包名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//message为关键字，作用为定义一种消息类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//    年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> ;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //定义一个message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    PhoneType</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	repeated</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//enum为关键字，作用为定义一种枚举类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> PhoneType</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	MOBILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    HOME </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    WORK </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><blockquote><p>如上，enum的第一个常量映射为0，每个枚举定义<strong>必须</strong>包含一个映射到零的常量作为其第一个元素。这是因为：</p><ul><li>必须有一个零值，以便我们可以使用0作为数字默认值。</li><li>零值必须是第一个元素，以便与proto2语义兼容，其中第一个枚举值始终是默认值。</li></ul></blockquote><p>enum还可以为不同的枚举常量指定相同的值来定义别名。如果想要使用这个功能必须讲<code>allow_alias</code>选项设置为true，负责编译器将报错。示例如下：</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">syntax</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;proto3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">; 						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本信息，不指定会报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后期生成go文件的包名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//message为关键字，作用为定义一种消息类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> ;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //定义一个message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        PhoneType</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    repeated</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//enum为关键字，作用为定义一种枚举类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> PhoneType</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//如果不设置将报错</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    option</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> allow_alias</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    MOBILE </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    HOME </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    WORK </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    Personal </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><strong>oneof关键字</strong></p><p>如果有一个包含许多字段的消息，并且最多只能同时设置其中的一个字段，则可以使用oneof功能，示例如下：</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> ;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //定义一个message</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        PhoneType</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    repeated</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> PhoneNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> phone </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    oneof</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> data{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> school </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>定义RPC服务</strong></p><p>如果需要将message与RPC一起使用，则可以在<code>.proto</code>文件中定义RPC服务接口，protobuf编译器将根据你选择的语言生成RPC接口代码。示例如下：</p><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义RPC服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">service</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    rpc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">returns</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>大部分protobuf的语法就是这样，其他想学习的可以参考官方文档，语法写完之后，让我们编译一下，然后通过代码试用一下。</p><h2 id="_3-4-protobuf基本编译" tabindex="-1">3.4 protobuf基本编译 <a class="header-anchor" href="#_3-4-protobuf基本编译" aria-label="Permalink to &quot;3.4 protobuf基本编译&quot;">​</a></h2><p>protobuf编译是通过编译器protoc进行的，通过这个编译器，我们可以把.proto文件生成<strong>go</strong>,Java,Python,C++, Ruby, JavaNano, Objective-C,或者C# 代码，生成命令如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --proto_path=IMPORT_PATH</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go_out=DST_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">  path/to/file.proto</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><ol><li>--proto_path=IMPORT_PATH，IMPORT_PATH是 .proto 文件所在的路径，如果忽略则默认当前目录。如果有多个目录则可以多次调用--proto_path，它们将会顺序的被访问并执行导入。</li><li>--go_out=DST_DIR， 指定了生成的go语言代码文件放入的文件夹</li><li>允许使用 <code>protoc --go_out=./ *.proto</code> 的方式一次性编译多个 .proto 文件</li><li>go语言编译时，protobuf 编译器会把 .proto 文件编译成 .pd.go 文件</li></ol></blockquote><p>一般在使用的时候我们都是使用下面这种简单的命令：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go_out=./</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">.proto</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>编译当前文件夹下的所有.proto文件，并把生成的go文件放置在当前文件夹下。</p></blockquote><p>我们先来编译一个最简单的的proto文件，编译之后会得到一个如下一个go文件，如下：</p><p><img src="`+g+'" alt="1564628074411"></p><blockquote><p>message被对应的编译成go语言中的结构体，同时还为String类型自动生成了一组方法，其中ProtoMessage方法表示这是一个实现了proto.Message接口的方法。此外Protobuf还为每个成员生成了一个Get方法，Get方法不仅可以处理空指针类型，而且可以和Proto2的方法保持一致.</p></blockquote><p>然后我们给这个<code>.proto</code>文件中添加一个RPC服务，再次进行编译，发现生成的go文件没有发生变化。这是因为世界上的RPC实现有很多种，protoc编译器并不知道该如何为HelloService服务生成代码。不过在protoc-gen-go内部已经集成了一个叫grpc的插件，可以针对grpc生成代码：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go_out=plugins=grpc:.</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">.proto</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在生成的代码中多了一些类似HelloServiceServer、HelloServiceClient的新类型。如下：</p><p><img src="'+c+`" alt="1564652925915"></p><p>和我们优化之后的RPC服务有点相似，但是又不太一样，接下来就让我们来学习一下grpc框架吧。</p><p>新版编译方法如下:</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go_out=./</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">.proto</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go-grpc_out=./</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">.proto</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="_4-grpc框架" tabindex="-1">4. GRPC框架 <a class="header-anchor" href="#_4-grpc框架" aria-label="Permalink to &quot;4. GRPC框架&quot;">​</a></h1><p>GRPC是Google公司基于<strong>Protobuf</strong>开发的跨语言的<strong>开源RPC框架</strong>。GRPC基于<strong>HTTP/2</strong>协议设计，可以基于一个HTTP/2链接提供多个服务，对于移动设备更加友好。目前提供 C、Java 和 Go 语言版本，分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python, Ruby, Objective-C, PHP 和 C# 支持.</p><p>在 gRPC里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC系统类似， gRPC也是基于以下理念：</p><ul><li><p>定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。</p></li><li><p>在服务端实现这个接口，并运行一个 gRPC服务器来处理客户端调用。</p></li></ul><p>在客户端拥有一个存根能够像服务端一样的方法。 gRPC客户端和服务端可以在多种环境中运行和交互 -从 google内部的服务器到你自己的笔记本，并且可以用任何 gRPC支持的语言 来编写。</p><p>所以，你可以很容易地用 Java创建一个 gRPC服务端，用 Go、 Python、Ruby来创建客户端。此外， Google最新 API将有 gRPC版本的接口，使你很容易地将 Google的功能集成到你的应用里。</p><p><strong>参考资料</strong></p><p>gRPC 官方文档中文版:<a href="http://doc.oschina.net/grpc?t=60133" target="_blank" rel="noreferrer">http://doc.oschina.net/grpc?t=60133</a></p><p>gRPC官网：<a href="https://grpc.io/" target="_blank" rel="noreferrer">https://grpc.io</a></p><p>再详细了解使用GRPC之前先来了解一下上面定义中的一些关键词。</p><p>首先我们来看一下<strong>HTTP/2</strong>是什么内容？</p><p>其实本质上就是http2.0版本，http目前为止主要有四个版本，分别为http1.0、http1.1、http2.0、https。</p><p>http1.0是最原始的版本，不支持持久连接，效率也比较低</p><p>http1.1针对http1.0版本做了优化，可以连接一次，多次使用，效率比http1.0高</p><p>http2.0实现了多路复用，对http1.1再次进行了优化。http2.0也被称为下一代http协议，是在2013年8月进行首次测试，所以现在用的不是很广。</p><p>https其实是在http协议上多加了一层SSL协议，具体如下图：</p><p><img src="`+y+`" alt="1564539159120"></p><blockquote><p>所以本质上，http1.0、http1.1、http2.0都可以添加SSL协议。</p></blockquote><h2 id="_4-1-grpc环境安装" tabindex="-1">4.1 grpc环境安装 <a class="header-anchor" href="#_4-1-grpc环境安装" aria-label="Permalink to &quot;4.1 grpc环境安装&quot;">​</a></h2><ol><li><p>官方推荐安装方法：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> google.golang.org/grpc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>但是由于一些原因，大部分同学不能直接访问google官网，所以只能曲线救国了</p></blockquote></li><li><p>通过github下载各种依赖库，然后配置。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> https://github.com/grpc/grpc-go.git</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">      $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/google.golang.org/grpc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> https://github.com/golang/net.git</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/golang.org/x/net</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> https://github.com/golang/text.git</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">       $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/golang.org/x/text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> https://github.com/google/go-genproto.git</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/google.golang.org/genproto</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> google.golang.org/grpc</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>网络畅通可以用上述方法，但如果网速较慢，我们也可以选择离线安装方法。</p></blockquote></li><li><p>用<code>x.zip</code>和<code>google.golang.org.zip</code>两个离线包来安装。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将x.zip 解压到 $GOPATH/src/golang.org/x 目录下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> x.zip</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/golang.org/x</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#将google.golang.org.zip 解压到 $GOPATH/src/google.golang.org 目录下</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> google.golang.org.zip</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> $GOPATH</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">/src/google.golang.org</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#然后进入到$GOPATH/src/google.golang.org/grpc下面执行go install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol><h2 id="_4-2-grpc使用" tabindex="-1">4.2 GRPC使用 <a class="header-anchor" href="#_4-2-grpc使用" aria-label="Permalink to &quot;4.2 GRPC使用&quot;">​</a></h2><pre><code>如果从Protobuf的角度看，GRPC只不过是一个针对service接口生成代码的生成器。接着我们来学习一下GRPC的用法。这里我们创建一个简单的proto文件，定义一个HelloService接口：
</code></pre><div class="language-protobuf vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">syntax</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;proto3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">; 				</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//后期生成go文件的包名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">message</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //   名字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //   年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    int32</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  age </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义RPC服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">service</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">    rpc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">returns</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>对proto文件进行编译：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go_out=plugins=grpc:.</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">.proto</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go-grpc_out=./</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">.proto</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">   (新版编译)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>GRPC插件会为服务端和客户端生成不同的接口：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//客户端接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> HelloServiceClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">	Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">grpc</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">CallOption</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//服务器接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> HelloServiceServer</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">	Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们接着可以基于他们给的服务端接口重新实现HelloService服务：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> HelloService</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">person</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	reply </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Name:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;zhangsan&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> person.Name,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Age:</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> reply,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>GRPC的启动流程和RPC的启动流程类似，代码如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //获取grpc服务端对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	grpcServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //注册grpc服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	pb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterHelloServiceServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(grpcServer,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //设置服务端监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	lis,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Listen</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;:1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //在指定端口上提供grpc服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	grpcServer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Serve</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(lis)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>然后我们就可以通过客户端来连接GRPC服务了：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //和grpc服务建立连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	conn,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Dial</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;localhost:1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">WithInsecure</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	client </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> pb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewHelloServiceClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	reply,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(),</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{Name:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;lisi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,Age:</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;reply,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,reply)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h1 id="_5-go-micro框架" tabindex="-1">5. go-micro框架 <a class="header-anchor" href="#_5-go-micro框架" aria-label="Permalink to &quot;5. go-micro框架&quot;">​</a></h1><p>在了解go-micro之前，我们先来了解一下什么是micro。</p><p>Micro是一个专注于简化分布式系统开发的微服务生态系统。由开源库和工具组成。主要包含以下几种库：</p><ul><li><p>**go-micro：**用于编写微服务的可插入Go-RPC框架; <strong>服务发现</strong>，客户端/服务器rpc，pub/sub等，是整个Micro的核心。</p><blockquote><p>默认使用mdns做服务发现，可以在插件中替换成consul,etcd,k8s等</p><p>组播 广播</p></blockquote></li><li><p>**go-plugins：**go-micro的插件，包括etcd，kubernetes(k8s)，nats，rabbitmq，grpc等</p></li><li><p>**micro：**一个包含传统入口点的微服务工具包; API网关，CLI，Slack Bot，Sidecar和Web UI。</p></li></ul><p>其他各种库和服务可以在<strong>github.com/micro</strong>找到。</p><p>我们主要使用的框架也是go-micro，在使用之前我们先来了解一下<strong>服务发现</strong>是个什么东西？有什么作用？</p><h2 id="_5-1-服务发现" tabindex="-1">5.1 服务发现 <a class="header-anchor" href="#_5-1-服务发现" aria-label="Permalink to &quot;5.1 服务发现&quot;">​</a></h2><p>我们在做微服务开发的时候，客户端的一个接口可能需要调用N个服务，客户端必须知道所有服务的网络位置（ip+port），如下图所示</p><p><img src="`+o+'" alt=""></p><p>以往的做法是把服务的地址放在配置文件活数据库中，这样就有以下几个问题：</p><ul><li>需要配置N个服务的网络位置，加大配置的复杂性</li><li>服务的网络位置变化，需要改变每个调用者的配置</li><li>集群的情况下，难以做负载（反向代理的方式除外）</li></ul><p>总结起来一句话：<strong>服务多了，配置很麻烦，问题一大堆</strong></p><p>所以现在就选择<strong>服务发现</strong>来解决这些问题。我们来看一下，服务发现如何解决这个问题，具体设计如下：</p><p><img src="'+b+`" alt=""></p><p>与之前解决方法不同的是，加了个服务发现模块。服务端把当前自己的网络位置注册到服务发现模块（这里注册的意思就是告诉），服务发现就以K-V的方式记录下，K一般是服务名，V就是IP:PORT。服务发现模块定时的轮询查看这些服务能不能访问的了（这就是健康检查）。客户端在调用服务A-N的时候，就跑去服务发现模块问下它们的网络位置，然后再调用它们的服务。这样的方式是不是就可以解决上面的问题了呢？客户端完全不需要记录这些服务的网络位置，客户端和服务端完全解耦！</p><p>常见的服务发现框架有：Etcd、Eureka、<strong>Consul</strong>、Zookeeper</p><p>这里我们选择go-micro默认的服务发现框架consul来做一个详细介绍。</p><h2 id="_5-2-了解consul并使用" tabindex="-1">5.2 了解consul并使用 <a class="header-anchor" href="#_5-2-了解consul并使用" aria-label="Permalink to &quot;5.2 了解consul并使用&quot;">​</a></h2><p>Consul是HashiCorp公司推出的开源工具，用于实现分布式系统的服务发现与配置。包含多个组件,但是作为一个整体,为你的基础设施提供服务发现和服务配置的工具.他提供以下关键特性:</p><p><strong>服务发现</strong>：consul通过DNS或者HTTP接口使服务注册和服务发现变的很容易，一些外部服务，例如saas提供的也可以一样注册。</p><p><strong>健康检查</strong>：健康检测使consul可以快速的告警在集群中的操作。和服务发现的集成，可以防止服务转发到故障的服务上面。(心跳机制)</p><p><strong>键/值存储</strong>：一个用来存储动态配置的系统。提供简单的HTTP接口，可以在任何地方操作。</p><p><strong>多数据中心</strong>：无需复杂的配置，即可支持任意数量的区域。</p><blockquote><p>官方建议：最好是三台或者三台以上的consul在运行，同名服务最好是三台或三台以上，默认可以搭建集群</p></blockquote><h3 id="_5-2-1-consul安装" tabindex="-1">5.2.1 consul安装 <a class="header-anchor" href="#_5-2-1-consul安装" aria-label="Permalink to &quot;5.2.1 consul安装&quot;">​</a></h3><p>​ Consul用Golang实现，因此具有天然可移植性 (支持 Linux、windows和macOS)。安装包仅包含一个可执行文件。 Consul安装非常简单，只需要下载对应系统的软件包并解压后就可使用。</p><p>安装步骤如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里以 ubuntu系统为例：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> wget</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> https://releases.hashicorp.com/consul/1.5.2/consul_1.5.2_linux_amd64.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> unzip</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> consul_1.5.2_linux_amd64.zip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> mv</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /usr/local/bin/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>教室网速原因，用老师给的离线包解压即可</p><p>其他系统版本可以在这里下载：<a href="https://www.consul.io/downloads.html" target="_blank" rel="noreferrer">https://www.consul.io/downloads.html</a></p></blockquote><p>安装验证：</p><p>安装 Consul后，通过执行 consul命令，你可以看到命令列表的输出</p><p><img src="`+F+`" alt=""></p><blockquote><p>没有报错就成功了</p></blockquote><h3 id="_5-2-2-consul的命令行" tabindex="-1">5.2.2 consul的命令行 <a class="header-anchor" href="#_5-2-2-consul的命令行" aria-label="Permalink to &quot;5.2.2 consul的命令行&quot;">​</a></h3><p>consul安装好之后，我们来使用一下吧。首先我们来看一下consul都有哪些命令。使用命令<code>consul -h</code>可以查看consul支持的所有参数，而且每个参数里面还支持其他参数，下面我们来具体看看。</p><p>**agent：**指令是consul的核心，它运行agent来维护成员的重要信息、运行检查、服务宣布、查询处理等等。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">Usage:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [options]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  Starts</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> runs</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> until</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> interrupt</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> received.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> The</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> represents</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> single</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> node</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> cluster.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Options:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -advertise</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">addr</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                  Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> advertise</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> use</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -advertise-wan</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">addr</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">              Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> advertise</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> wan</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> instead</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   advertise</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> addr</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -bootstrap</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                       Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> bootstrap</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> mode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">0.0.0.0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                    Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> bind</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> cluster</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   communication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -http-port</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">8500</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                  Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> HTTP</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> API</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> listen</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> on</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -bootstrap-expect</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">              Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> expect</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> bootstrap</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> mode.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -client</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">127.0.0.1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> bind</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> client</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> access.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   This</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> includes</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> RPC,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> DNS,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> HTTP</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> HTTPS</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (if</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   configured</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -config-file</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                 Path</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> read</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   from.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> This</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> specified</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -config-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">foo</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                  Path</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> directory</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> read</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   files</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> from.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> This</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> read</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> every</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> ending</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                                   in </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> as configuration in this</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   directory</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> alphabetical</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> order.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> This</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> be</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   specified</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -data-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">path</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                   Path</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> data</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> directory</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> store</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   state</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -dev</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                             Starts</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> development</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> mode.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -recursor</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">1.2.3.4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                Address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> DNS</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> server.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   Can</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> specified</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -dc</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">east-aws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                     Datacenter</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (deprecated: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">use</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   &#39;datacenter&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> instead</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -datacenter</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">east-aws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">             Datacenter</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -encrypt</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">key</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                     Provides</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> gossip</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> encryption</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -join</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">1.2.3.4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                    Address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> time.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   Can</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> specified</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -join-wan</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">1.2.3.4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                Address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -wan</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> start</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                                   time. Can be specified multiple times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -retry-join</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">1.2.3.4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">              Address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> time</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   with</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> retries</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> enabled.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Can</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> specified</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -retry-interval</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">30s</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">              Time</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> wait</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> between</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> attempts.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -retry-max</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                     Maximum</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> number</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> attempts.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Defaults</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   0,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> retry</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> indefinitely.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -retry-join-ec2-region</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">           EC2</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Region</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> discovering</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> servers</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   join.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -retry-join-ec2-tag-key</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">          EC2</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> key</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> filter</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   discovery</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -retry-join-ec2-tag-value</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        EC2</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> value</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> filter</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> server</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   discovery</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -retry-join-gce-project-name</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">     Google</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Compute</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Engine</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> project</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> discover</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   servers</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -retry-join-gce-zone-pattern</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">     Google</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Compute</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Engine</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> region</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> or</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> zone</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   discover</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> servers</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (regex </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -retry-join-gce-tag-value</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        Google</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Compute</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Engine</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> value</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> filter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">                                   for</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> server discovery</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -retry-join-gce-credentials-file</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Path</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> credentials</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> use</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> with</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   Google</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Compute</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Engine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -retry-join-wan</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">1.2.3.4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">          Address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -wan</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> start</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">                                   time</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> with retries enabled. Can be specified</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -retry-interval-wan</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">30s</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">          Time</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> wait</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> between</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -wan</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> attempts.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -retry-max-wan</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                 Maximum</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> number</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> join</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -wan</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> attempts.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   Defaults</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> will</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> retry</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   indefinitely.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -log-level</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">info</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                  Log</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> level</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -node</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">hostname</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                   Name</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> this</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> node.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Must</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> unique</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   cluster</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -node-meta</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">key:value</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">             An</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> arbitrary</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> metadata</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> key/value</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pair</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   this</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> node.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   This</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> can</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> be</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> specified</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> multiple</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> times.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -protocol</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">N</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                      Sets</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protocol</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> version.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Defaults</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   latest.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -rejoin</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                          Ignores</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> previous</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> leave</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> attempts</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   rejoin</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> cluster.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -server</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                          Switches</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> server</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> mode.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -syslog</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                          Enables</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> logging</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> syslog</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">  -ui</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                              Enables</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> built-in</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> static</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> web</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> UI</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> server</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -ui-dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">path</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                     Path</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> directory</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> containing</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Web</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> UI</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                                   resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  -pid-file</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">path</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">                   Path</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> store</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> PID</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div><p>**info：**指令提供了各种操作时可以用到的debug信息，对于client和server，info有返回不同的子系统信息，目前有以下几个KV信息：agent(提供agent信息)，consul(提供consul库的信息)，raft(提供raft库的信息)，serf_lan(提供LAN gossip pool),serf_wan(提供WAN gossip pool)</p><p>**leave：**指令触发一个优雅的离开动作并关闭agent，节点离开后不会尝试重新加入集群中。运行在server状态的节点，节点会被优雅的删除，这是很严重的，在某些情况下一个不优雅的离开会影响到集群的可用性。</p><p>**members：**指令输出consul agent目前所知道的所有的成员以及它们的状态，节点的状态只有alive、left、failed三种状态。</p><blockquote><p>-detailed：输出每个节点更详细的信息。 -rpc-addr：一个rpc地址，agent可以链接上来发送命令，如果没有指定，默认是127.0.0.1:8400。 -status：过滤出符合正则规则的节点</p></blockquote><p>**reload：**指令可以重新加载agent的配置文件。SIGHUP指令在重新加载配置文件时使用，任何重新加载的错误都会写在agent的log文件中，并不会打印到屏幕。</p><h3 id="_5-2-3-consul简单使用" tabindex="-1">5.2.3 consul简单使用 <a class="header-anchor" href="#_5-2-3-consul简单使用" aria-label="Permalink to &quot;5.2.3 consul简单使用&quot;">​</a></h3><p>首先我们要运行consul，运行有两种模式，分别是==server==和==client==，通过下面的命令开启：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>每个数据中心至少必须拥有一个server。一个client是一个非常轻量级的进程.用于注册服务,运行健康检查和转发对server的查询.agent必须在集群中的每个主机上运行.</p><p>接着我们以server的模式启动一个consul：</p><h4 id="server模式启动" tabindex="-1">server模式启动 <a class="header-anchor" href="#server模式启动" aria-label="Permalink to &quot;server模式启动&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -server</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -bootstrap-expect</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -data-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /tmp/consul</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -node=n1</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -bind=192.168.6.108</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -ui</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -rejoin</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -config-dir=/etc/consul.d/</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -client</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 0.0.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+u+`" alt=""></p><blockquote><p>需要先在/etc/下面创建consul.d目录</p><ul><li><code>-server</code> ： 定义agent运行在server模式</li><li><code>-bootstrap-expect</code> ：在一个datacenter中期望提供的server节点数目，当该值提供的时候，consul一直等到达到指定sever数目的时候才会引导整个集群，该标记不能和bootstrap共用</li><li><code>-bind</code>：该地址用来在集群内部的通讯，集群内的所有节点到地址都必须是可达的，默认是0.0.0.0</li><li><code>-node</code>：节点在集群中的名称，在一个集群中必须是唯一的，默认是该节点的主机名</li><li><code>-ui</code>： 启动web界面 :8500</li><li><code>-rejoin</code>：使consul忽略先前的离开，在再次启动后仍旧尝试加入集群中。</li><li><code>-config-dir</code>：配置文件目录，里面所有以.json结尾的文件都会被加载</li><li><code>-client</code>：consul服务侦听地址，这个地址提供HTTP、DNS、RPC等服务，默认是127.0.0.1所以不对外提供服务，如果你要对外提供服务改成0.0.0.0</li><li><code>data-dir</code>：提供一个目录用来存放agent的状态，所有的agent允许都需要该目录，该目录必须是稳定的，系统重启后都继续存在</li></ul></blockquote><h4 id="client模式启动" tabindex="-1"><strong>client模式启动</strong> <a class="header-anchor" href="#client模式启动" aria-label="Permalink to &quot;**client模式启动**&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> agent</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -data-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /tmp/consul</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -node=n2</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -bind=192.168.137.82</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -config-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /etc/consul.d</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -rejoin</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -join</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> 192.168.137.81</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>运行cosnul agent以client模式，-join 加入到已有的集群中去。</p></blockquote><h4 id="查看consul成员" tabindex="-1"><strong>查看consul成员</strong> <a class="header-anchor" href="#查看consul成员" aria-label="Permalink to &quot;**查看consul成员**&quot;">​</a></h4><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> members</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#节点  网络地址                状态     类型     版本   协议       数据中心  分管部分 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Node</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">  Address</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                Status</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">  Type</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    Build</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">  Protocol</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">  DC</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">   Segment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">n1</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    192.168.137.130:8301</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">   alive</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">   server</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  1.1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  2</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">         dc1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">  &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">al</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">n3</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    192.168.137.81:8301</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    alive</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">   client</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  1.1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  2</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">         dc1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">  &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">defaul</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="停止agent" tabindex="-1"><strong>停止agent</strong> <a class="header-anchor" href="#停止agent" aria-label="Permalink to &quot;**停止agent**&quot;">​</a></h4><p>你可以使用Ctrl-C 优雅的关闭Agent. 中断Agent之后你可以看到他离开了集群并关闭.</p><p>​ 在退出中,Consul提醒其他集群成员,这个节点离开了.如果你强行杀掉进程.集群的其他成员应该能检测到这个节点失效了.当一个成员离开,他的服务和检测也会从目录中移除.当一个成员失效了,他的健康状况被简单的标记为危险,但是不会从目录中移除.Consul会自动尝试对失效的节点进行重连.允许他从某些网络条件下恢复过来.离开的节点则不会再继续联系.</p><p>​ 此外,如果一个agent作为一个服务器,一个优雅的离开是很重要的,可以避免引起潜在的可用性故障影响达成一致性协议. consul优雅的退出：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> leave</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="注册服务" tabindex="-1"><strong>注册服务</strong> <a class="header-anchor" href="#注册服务" aria-label="Permalink to &quot;**注册服务**&quot;">​</a></h4><p>搭建好conusl集群后，用户或者程序就能到consul中去查询或者注册服务。可以通过提供服务定义文件或者调用HTTP API来注册一个服务.</p><p>这里我们使用定义服务文件来注册一个服务:</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">&quot;service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;Faceid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;tags&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;rails&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">9000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>服务定义文件在我们的配置目录下面，<code>/etc/consul.d/</code>，文件都是以.json结尾。</p></blockquote><p>注册完服务之后，我们重启consul，</p><p><img src="`+C+'" alt="1565103071456"></p><blockquote><p>红圈里面的就是表示agent从配置文件中载入了服务定义,并且成功注册到服务目录.</p><p>如果需要注册多个服务，就需要创建多个服务定义文件。</p></blockquote><h4 id="查询服务" tabindex="-1"><strong>查询服务</strong> <a class="header-anchor" href="#查询服务" aria-label="Permalink to &quot;**查询服务**&quot;">​</a></h4><p>一旦agent启动并且服务同步了.我们可以通过DNS或者HTTP的API来查询服务.这里我们通过HTTP来查询服务：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 127.0.0.1:8500/v1/catalog/service/faceid</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>得到一串json数据，不过格式不够清晰，拷贝到在线json格式解析器中，如下所示：</p><p><img src="'+E+'" alt="1565106650464"></p><p>我们还可以打开web页面，查看注册的服务。默认consul对应的端口是8500，在浏览器输入地址<code>localhost:8500</code></p><p><img src="'+m+`" alt="1565106804694"></p><p>也能看到我们注册的服务。</p><h4 id="健康检查" tabindex="-1"><strong>健康检查</strong> <a class="header-anchor" href="#健康检查" aria-label="Permalink to &quot;**健康检查**&quot;">​</a></h4><p>健康检查是服务发现的关键组件.预防使用到不健康的服务.和服务注册类似,一个检查可以通过检查定义或HTTP API请求来注册.我们将使用和检查定义来注册检查.和服务类似,因为这是建立检查最常用的方式.</p><p>在/etc/consul.d/目录下面创建文件web2.json,内容如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">&quot;service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;tags&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;extract&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;verify&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;compare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;idcard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;address&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;192.168.137.130&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">9000</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">        &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">        &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HTTP API on port 9000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">        &quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;http://localhost:9000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">        &quot;interval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;10s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">        &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;1s&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>这时候我们没有开启这个服务，所以这个时候健康检查会出错。打开web界面，如下</p></blockquote><p>consul做健康检查的必须是<strong>Script、HTTP、TCP、TTL</strong>中的一种。</p><p>**Script类型需要提供Script脚本和interval变量。**具体配置如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;mem-util&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;Memory utilization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;/usr/local/bin/check_mem.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;interval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;10s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;1s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>通过执行外部应用进行健康检查：这种外部程序具有退出代码，并可能产生一些输出；脚本按照指预置时间间隔来调用（比如，每30秒调用一次），类似于Nagios插件系统，脚本输出限制在4K以内，输出大于4K将截断。默认情况下，脚本超时时间为30秒——可通过timeout来配置。</p></blockquote><p>**HTTP类型必须提供http和Interval字段。**具体代码如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HTTP API on port 5000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;http://localhost:5000/health&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;interval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;10s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;1s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>这种检查将按照预设的时间间隔创建一个HTTP “get”请求。HTTP响应代码来标示服务所处状态：任何2xx代码视为正常，429表示警告——有很多请求；其他值表示失败。</p><p>这种类型的检查应使用curl或外部程序来处理HTTP操作。默认情况下，HTTP Checks中，请求超时时间等于调用请求的间隔时间，最大10秒。有可能使用客制的HTTP check，可以自由配置timeout时间，输出限制在4K以内，输出大于4K将截断。</p></blockquote><p>**TCP类型需要提供tcp和Interval字段。**具体代码如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;ssh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;SSH TCP on port 22&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;localhost:22&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;interval&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;10s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;timeout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;1s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>这种检查将按照预设的时间间隔与指定的IP/Hostname和端口创建一个TCP连接。服务的状态依赖于TCP连接是否成功——如果连接成功，则状态是“success”；否则状态是“critical”。如果一个Hostname解析为一个IPv4和一个IPv6，将尝试连接这两个地址，第一次连接成功则服务状态是“success”。默认情况下，TCP checks中，请求超时时间等于调用请求的间隔时间，最大10秒。也是可以自由配置的。</p></blockquote><p><strong>TTL（<strong>Timeto Live生存时间</strong>）类型只需提供ttl</strong>，具体配置如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">  &quot;check&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;web-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;Web App Status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;notes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;Web app does a curl internally every 10 seconds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">    &quot;ttl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;30s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">  }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>这种checks为给定TTL保留了最后一种状态，checks的状态必须通过HTTP接口周期性更新，如果外部接口没有更新状态，那么状态就会被认定为不正常。 TTL checks同时会将其最后已知状态更新至磁盘，这允许Agent通过重启后恢复到已知的状态。通过TTL端上一次check来维持健康状态的有效性。</p></blockquote><p>我们也可以通过页面来查看,在浏览器输入网址：<a href="http://192.68.130.137:8500" target="_blank" rel="noreferrer">http://192.68.130.137:8500</a></p><p><img src="`+A+`" alt="1565107450324"></p><p>其他更多consul功能，我们可以参考<a href="http://www.liangxiansen.cn/2017/04/06/consul/" target="_blank" rel="noreferrer">http://www.liangxiansen.cn/2017/04/06/consul/</a></p><h3 id="_5-2-4-consul和grpc结合使用" tabindex="-1">5.2.4 consul和grpc结合使用 <a class="header-anchor" href="#_5-2-4-consul和grpc结合使用" aria-label="Permalink to &quot;5.2.4 consul和grpc结合使用&quot;">​</a></h3><p>学完了consul命令行的使用，接着我们来看一下，在代码中如何通过，这里我们用grpc和consul结合使用。</p><p>我们操作consul使用的是github.com/hashicorp/consul/包，我们先来下载一下，命令如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/hashicorp/consul</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后我们先注册一个服务到consul上：</p><h4 id="把grpc服务注册到consul上" tabindex="-1"><strong>把grpc服务注册到consul上</strong> <a class="header-anchor" href="#把grpc服务注册到consul上" aria-label="Permalink to &quot;**把grpc服务注册到consul上**&quot;">​</a></h4><p>代码如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //初始化consul配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	consulConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">DefaultConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//获取consul操作对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	registry,_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(consulConfig)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//注册服务,服务的常规配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	registerService </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> api</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">AgentServiceRegistration</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		ID:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Tags:[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;testHello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Name:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HelloService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Port:</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Address:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;192.168.137.130&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Check:</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">AgentServiceCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">			TCP:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;192.168.137.130:8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">			Timeout:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;5s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">			Interval:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;5s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//注册服务到consul上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">ServiceRegister</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">registerService)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //获取grpc服务端对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	grpcServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //注册grpc服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	pb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterHelloServiceServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(grpcServer,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">HelloService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //设置服务端监听</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	lis,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> net.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Listen</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;tcp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;:1234&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //在指定端口上提供grpc服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	grpcServer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Serve</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(lis)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h4 id="服务发现" tabindex="-1"><strong>服务发现</strong> <a class="header-anchor" href="#服务发现" aria-label="Permalink to &quot;**服务发现**&quot;">​</a></h4><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //初始化consul配置, 客户端服务器需要一致</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	consulConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">DefaultConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //获取consul操作对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    registerClient,_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(consulConfig)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//获取地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	serviceEntry,_,_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">registerClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Health</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Service</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;HelloService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;testHello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">api</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">QueryOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //和grpc服务建立连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	conn,err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Dial</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(serviceEntry[</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">].Service.Address</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">strconv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Itoa</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(serviceEntry[</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">].Service.Port),grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">WithInsecure</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	defer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> conn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Close</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	client </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> pb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewHelloServiceClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(conn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	reply, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Hello</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(),</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">pb</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{Name:</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;lisi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,Age:</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">		panic</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;reply,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,reply)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="注销服务" tabindex="-1"><strong>注销服务</strong> <a class="header-anchor" href="#注销服务" aria-label="Permalink to &quot;**注销服务**&quot;">​</a></h4><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 //初始化consul配置,客户端服务器需要一致</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	consulConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">DefaultConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //获取consul操作对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    registerClient,_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewClient</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(consulConfig)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//注销服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">     client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Agent</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">ServiceDeregister</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>etcd、 zookeeper</p></blockquote><h2 id="_5-3-go-micro安装" tabindex="-1">5.3 go-micro安装 <a class="header-anchor" href="#_5-3-go-micro安装" aria-label="Permalink to &quot;5.3 go-micro安装&quot;">​</a></h2><p>做了这么久的铺垫，接着让我们来进入主题，go-micro的学习，首先我们先来安装一下go-micro开发环境。安装步骤如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#安装go-micro</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/micro/go-micro</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#安装工具集</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/micro/micro</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#安装protobuf插件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/golang/protobuf/{proto,protoc-gen-go}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/micro/protoc-gen-micro</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>或者通过docker镜像安装：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> microhq/micro</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装之后输入micro命令，显示如下就证明安装成功</p><p><img src="`+D+`" alt="1565108115509"></p><p>接着我们来看一下go-micro的使用。</p><h2 id="_5-4-go-micro使用" tabindex="-1">5.4 go-micro使用 <a class="header-anchor" href="#_5-4-go-micro使用" aria-label="Permalink to &quot;5.4 go-micro使用&quot;">​</a></h2><p>首先我们先来创建一个go micro框架的项目，我们使用micro命令，可以创建微服务，web项目等，具体用法如下：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">		Create</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Micro</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> specifying</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> directory</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> path</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> relative</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> your</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> $GOPATH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#创建	通过指定相对于$GOPATH的目录路径，创建一个新的微服务。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">USAGE:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#用法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">micro</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> [command </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">options][arguments...]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#指定服务的命名空间</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">--namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;go.micro&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">	Namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> e.g</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> com.example</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#服务类型，可以是微服务srv,或者web项目,或者api等						</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">--type</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;srv&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">			Type</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> e.g</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> api,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> fnc,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> srv,</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> web</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#服务的正式完整定义						</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">--fqdn</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 					FQDN</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> e.g</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> com.example.srv.service</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (defaults </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">to</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> namespace.type.alias</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#别名是在指定时作为组合名的一部分使用的短名称  别名						</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">--alias</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> 				Alias</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> short</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> used</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> part</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> combined</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> if</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> specified</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我们常用的就是创建微服务和web项目，如下：</p><p><strong>创建一个web项目</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">micro</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> &quot;web&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> micro/rpc/web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Creating</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> go.micro.web.web</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /home/itcast/go/src/micro/rpc/web</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#主函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> main.go</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#插件文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> plugin.go</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#被调用处理函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> handler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> handler.go</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#前端页面</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> html</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> index.html</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#docker生成文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Makefile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> README.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#编译后将web端呼叫srv端的客户端连接内容修改为srv的内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#需要进行调通</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>打开我们web项目下的main.go文件，内容如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-log</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">net/http</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-web</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">    &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">micro/rpc/web/handler</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 创建1个web服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        service </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> web.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           //注册服务名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                web.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.web.web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //服务的版本号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                web.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                //！添加端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                web.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Address</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;:8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//服务进行初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Fatal</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//处理请求  / 的路由</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //当前这个web微服务的 html文件进行映射</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Handle</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">FileServer</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Dir</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//处理请求 /example/call  的路由   这个相应函数 在当前项目下的handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">HandleFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;/example/call&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, handler.ExampleCall)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//运行服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Fatal</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>接着我们再来看一下我们重点需要操作的文件，handle.go,内容如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> handler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">context</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">encoding/json</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">net/http</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">time</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">	&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro/client</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //将srv中的proto的文件导入进来进行通信的使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	example </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">micro/rpc/srv/proto/example</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//相应请求的业务函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> ExampleCall</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">w</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> http</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">ResponseWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">r</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Request</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 将传入的请求解码为json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	var</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(r.Body).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Decode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">request); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(w, err.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// 调用服务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //替换掉原有的服务名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //通过服务名和</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	exampleClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewExampleService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.srv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, client.DefaultClient)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	rsp, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> exampleClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">example</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Request</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		Name: request[</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">].(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(w, err.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// we want to augment the response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	response </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> map</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">interface</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{}{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">		&quot;msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: rsp.Msg,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">		&quot;ref&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">: time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Now</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">UnixNano</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// encode and write the response as json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(w).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Encode</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(response); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">		http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(w, err.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">		return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p><strong>创建微服务</strong></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">$micro new --type </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;srv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> t1/t1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#&quot;srv&quot; 是表示当前创建的微服务类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#micro是相对于go/src下的文件夹名称 可以根据项目进行设置 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#srv是当前创建的微服务的文件名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Creating</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> go.micro.srv.srv</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /home/itcast/go/src/t1/t1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#主函数存放位置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> main.go</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#插件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> plugin.go</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#服务提供函数的实现</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> handler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> example.go</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#订阅服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> subscriber</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> example.go</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#proto协议</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> proto/example</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> example.proto</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#docker生成文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#编译文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> Makefile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> README.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#插件提示，已安装，可忽略</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">download</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protobuf</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> micro:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> protobuf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/golang/protobuf/{proto,protoc-gen-go}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> get</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> github.com/micro/protoc-gen-micro</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">compile</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> proto</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> example.proto:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> /home/itcast/go/src/micro/rpc/srv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">protoc</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --proto_path=.</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --go_out=.</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> --micro_out=.</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;"> proto/example/example.proto</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>我们来看一下微服务中的main.go文件：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro/util/log</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/handler</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/subscriber</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t1 </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/proto/t1</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个micro服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        service </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 初始化服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterT1Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">T1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册一个发布器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">T1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册一个函数到发布器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), subscriber.Handler)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 运行服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Fatal</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>默认情况下，go micro框架使用的是自己封装的rpc通信，这里我们可以替换成grpc，代码如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro/util/log</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/handler</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/subscriber</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">		&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-grpc</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//go micro内嵌了grpc框架</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t1 </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/proto/t1</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个micro服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        service </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 初始化服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterT1Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">T1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册一个发布器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">T1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册一个函数到发布器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), subscriber.Handler)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 运行服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Fatal</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p><strong>服务发现：</strong></p><p>在go-micro包中，共有4种注册实现consul、gossip、mdns、memory，前两个都是基于hashicorp公司的协议，mdns则是基于组网广播实现，memory则是本地实现。</p><p>consul 依赖hashicorp的组件，但是功能强大、完整 gossip 基于SWIM协议广播，零依赖 mdns 轻量、零依赖，但是对环境有要求，某些环境不支持mdns的无法正常使用 memory 本地解决方案，不可跨主机访问 另外在go-plugins中有其它注册实现，比如etcd、eureka、k8s、nats、zk等等</p><p>大体解释下接口中每个方法的作用</p><ul><li>Init 初始化</li><li>Options 获取配置选项</li><li>Register 注册服务</li><li>Deregister 卸载服务</li><li>GetService 获取指定服务</li><li>ListServices 列出所有服务</li><li>Watch watcher 负责侦听变动</li><li>String 注册信息转成字符串描述</li></ul><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-light vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro/util/log</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/handler</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/subscriber</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">		&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-grpc</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro/registry/consul</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">github.com/micro/go-micro/registry</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t1 </span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">t1/t1/proto/t1</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //初始化服务发现</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> consul.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E36209;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">registry</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Options</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                options.Addrs </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">                        &quot;192.168.137.130:8500&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建一个micro服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        service </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> grpc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">NewService</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Name</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">            	micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Registry</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(reg),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 初始化服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Init</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterT1Handler</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">handler</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">T1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册一个发布器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">subscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">T1</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 注册一个函数到发布器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        micro.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">RegisterSubscriber</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#032F62;">&quot;go.micro.srv.t1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">, service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(), subscriber.Handler)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 运行服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Run</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#D73A49;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#005CC5;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">                log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6F42C1;">Fatal</span><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2>`,349)]))}const T=i(v,[["render",q]]);export{S as __pageData,T as default};
