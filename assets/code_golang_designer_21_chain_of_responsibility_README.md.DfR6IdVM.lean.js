import{j as l,c as n,b as t,q as e,f as o}from"./chunks/framework.BlzMDYBM.js";const u=JSON.parse('{"title":"职责链模式","description":"","frontmatter":{},"headers":[],"relativePath":"code/golang/designer/21_chain_of_responsibility/README.md","filePath":"code/golang/designer/21_chain_of_responsibility/README.md","lastUpdated":1744879674000}'),i={name:"code/golang/designer/21_chain_of_responsibility/README.md"};function r(s,a,d,c,p,_){return t(),n("div",null,a[0]||(a[0]=[e("h1",{id:"职责链模式",tabindex:"-1"},[o("职责链模式 "),e("a",{class:"header-anchor",href:"#职责链模式","aria-label":'Permalink to "职责链模式"'},"​")],-1),e("p",null,"职责链模式用于分离不同职责，并且动态组合相关职责。",-1),e("p",null,"Golang实现职责链模式时候，因为没有继承的支持，使用链对象包涵职责的方式，即：",-1),e("ul",null,[e("li",null,"链对象包含当前职责对象以及下一个职责链。"),e("li",null,"职责对象提供接口表示是否能处理对应请求。"),e("li",null,"职责对象提供处理函数处理相关职责。")],-1),e("p",null,"同时可在职责链类中实现职责接口相关函数，使职责链对象可以当做一般职责对象是用。",-1)]))}const g=l(i,[["render",r]]);export{u as __pageData,g as default};
